{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\bricktile.ts"],
  "sourcesContent": ["import { Collider } from \"engine/modules/collision\";\r\nimport Brick, { BrickParams } from \"./brick\";\r\n\r\n/** Parameters for a tile */\r\nexport interface BrickTileParams extends BrickParams {\r\n    isOn?: boolean;     // If the tile starts on or off\r\n    images: string[];   // Images for the tile on/off states\r\n    circuit: number;    // Circuit number that turns the tile on/off\r\n}\r\n\r\n/** A tile, a brick without studs */\r\nexport default class BrickTile extends Brick {\r\n\r\n    protected isOn : boolean = false;       // If the effects for this\r\n    protected images : HTMLImageElement[];  // Images for this tile\r\n    public circuit : number;                // Curcuit for this tile, which can externally turn it on or off.\r\n\r\n    /** Constructor */\r\n    constructor(params: BrickTileParams) {\r\n        super({...params, block : true});\r\n\r\n        this.tags.push(\"BrickTile\");\r\n\r\n        this.images = params.images.map(i => i ? this.engine.library.getImage(i) : {} as HTMLImageElement);\r\n\r\n        this.isOn = params.isOn ?? true;\r\n        this.image = this.images[+this.isOn];\r\n        this.circuit = params.circuit;\r\n    }\r\n\r\n    /** Set the on/off state of this tile and set the current image to match */\r\n    public setOnOff(state : boolean) {\r\n        this.isOn = state;\r\n        this.image = this.images[+this.isOn];\r\n    }\r\n}"],
  "mappings": "AACA;AADA,uCAWuC;AAAA,EAOnC,YAAY;AACR,UAAM,IAAI,QAAQ,OAAQ;AANpB,gBAAiB;AAQvB,SAAK,KAAK,KAAK;AAEf,SAAK,SAAS,OAAO,OAAO,IAAI,OAAK,IAAI,KAAK,OAAO,QAAQ,SAAS,KAAK;AAE3E,SAAK,OAAO,OAAO,QAAQ;AAC3B,SAAK,QAAQ,KAAK,OAAO,CAAC,KAAK;AAC/B,SAAK,UAAU,OAAO;AAAA;AAAA,EAInB;AACH,SAAK,OAAO;AACZ,SAAK,QAAQ,KAAK,OAAO,CAAC,KAAK;AAAA;AAAA;",
  "names": []
}
