{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\charactergear.ts"],
  "sourcesContent": ["import GameObject, { Collision } from \"engine/gameobjects/gameobject\";\r\nimport { Collider } from \"engine/modules/collision\";\r\nimport { bitStack, BOUNDARY, col1D, RING_BITSTACKB as ring, GMULTX, GMULTY, MASKS, OPPOSITE_DIRS } from \"engine/utilities/math\";\r\nimport Vect, { Point } from \"engine/utilities/vect\";\r\nimport Character from \"./character\";\r\n\r\n// Character states\r\nexport enum GearState {\r\n    NORMAL,\r\n    STOP,\r\n    WAIT\r\n}\r\n\r\n/** Base gear character */\r\nexport default class CharacterGear extends Character {\r\n\r\n    protected storedCbm: number = 0;      // Store Collision bitmask from collision for later resolution\r\n    protected isStep: boolean = false;    // True on frames where a character step has occured\r\n    \r\n    protected get isColFlor() : boolean { return !!(this.storedCbm & ring.flor); }  // Collision below\r\n    protected get isColRoof() : boolean { return !!(this.storedCbm & ring.roof); }  // Collision above\r\n    protected get isColFace() : boolean { return !!(this.storedCbm & ring.face); }  // Collision front\r\n    protected get isColBack() : boolean { return !!(this.storedCbm & ring.back); }  // Collision back\r\n    protected get isColLand() : boolean { return !!(this.storedCbm & ring.land); }  // Collision front-low corner\r\n    protected get isColBand() : boolean { return !!(this.storedCbm & ring.band); }  // Collision front-rear corner\r\n    protected get isColHang() : boolean { return !!(this.storedCbm & ring.hang); }  // Collision distant front-low\r\n\r\n    /** Get colliders */\r\n    public getColliders() : Collider[] {\r\n\r\n        return [{ \r\n            mask : MASKS.death,\r\n            min : this.gpos\r\n                .getAdd({ x : -1, y : 1 - this.height})\r\n                .getMult(GMULTX, GMULTY),\r\n            max : this.gpos\r\n                .getAdd({ x :  1, y : 1})\r\n                .getMult(GMULTX, GMULTY),\r\n            isSub : true\r\n        }];\r\n    }\r\n\r\n    public handleStepUpdate(proxs : Point[]) {\r\n\r\n        this.storedCbm = 0;\r\n\r\n        //Characters in proxminity\r\n        proxs.forEach(p => {\r\n\r\n            //Below\r\n            if (p.y == 2) {\r\n                this.storedCbm |= ring.flor\r\n            }\r\n            //Above\r\n            if (p.y == -2) {\r\n                this.storedCbm |= ring.roof\r\n            }\r\n            //Rightward\r\n            if (p.x == 2) {\r\n                this.storedCbm |= (this.move.x > 0 ? ring.face : ring.back)\r\n            }\r\n            //Leftward\r\n            if (p.x == -2) {\r\n                this.storedCbm |= (this.move.x > 0 ? ring.back : ring.face)\r\n            }\r\n        })\r\n\r\n        // WALL BOUNDARY (WHY ARE WE YELLING)\r\n        if (this.gpos.x - 2 < BOUNDARY.minx) {\r\n            this.storedCbm |= (this.move.x > 0 ? ring.back : ring.face);\r\n        }        \r\n        else if (this.gpos.x + 2 > BOUNDARY.maxx) {\r\n            this.storedCbm |= (this.move.x > 0 ? ring.face : ring.back);\r\n        }\r\n\r\n        // Ceiling boundary\r\n        if (this.gpos.y - 2 < BOUNDARY.miny) {\r\n            this.storedCbm |= ring.roof;\r\n        }\r\n\r\n        // Bricks\r\n        this.storedCbm |= this.brickHandler.checkCollisionRing(\r\n            this.gpos.getAdd({\r\n                x : -2, \r\n                y : -this.height}), \r\n            4, \r\n            this.move.x,\r\n            true);\r\n    }\r\n\r\n    /** */\r\n    public handleStep() {\r\n\r\n        if(this.stateIndex == GearState.NORMAL) {\r\n            this.moveAll(this.move);\r\n        }\r\n    }\r\n\r\n    /** Get both grid spaces ahead of this character */\r\n    public getNoPlaceZone() : Point[] {\r\n\r\n        return [-1, 0].flatMap(x => [-1, 0].map(y => new Vect(x,y)\r\n            .getAdd(this.gpos)\r\n            .getAdd(this.stateIndex == 0 ? this.move : {x : 0, y : 0})));\r\n    }\r\n}"],
  "mappings": "AAEA;AACA;AACA;AAGO,WAAK;AAAL;AACH;AACA;AACA;AAAA,GAHQ;AAPZ,2CAc2C;AAAA,EAd3C;AAAA;AAgBc,qBAAoB;AACpB,kBAAkB;AAAA;AAAA,MAEd;AAAwB,WAAO,CAAC,CAAE,MAAK,YAAY,KAAK;AAAA;AAAA,MACxD;AAAwB,WAAO,CAAC,CAAE,MAAK,YAAY,KAAK;AAAA;AAAA,MACxD;AAAwB,WAAO,CAAC,CAAE,MAAK,YAAY,KAAK;AAAA;AAAA,MACxD;AAAwB,WAAO,CAAC,CAAE,MAAK,YAAY,KAAK;AAAA;AAAA,MACxD;AAAwB,WAAO,CAAC,CAAE,MAAK,YAAY,KAAK;AAAA;AAAA,MACxD;AAAwB,WAAO,CAAC,CAAE,MAAK,YAAY,KAAK;AAAA;AAAA,MACxD;AAAwB,WAAO,CAAC,CAAE,MAAK,YAAY,KAAK;AAAA;AAAA,EAG/D;AAEH,WAAO,CAAC;AAAA,MACJ,MAAO,MAAM;AAAA,MACb,KAAM,KAAK,KACN,OAAO,CAAE,GAAI,IAAI,GAAI,IAAI,KAAK,SAC9B,QAAQ,QAAQ;AAAA,MACrB,KAAM,KAAK,KACN,OAAO,CAAE,GAAK,GAAG,GAAI,IACrB,QAAQ,QAAQ;AAAA,MACrB,OAAQ;AAAA;AAAA;AAAA,EAIT;AAEH,SAAK,YAAY;AAGjB,UAAM,QAAQ;AAGV,UAAI,EAAE,KAAK;AACP,aAAK,aAAa,KAAK;AAAA;AAG3B,UAAI,EAAE,KAAK;AACP,aAAK,aAAa,KAAK;AAAA;AAG3B,UAAI,EAAE,KAAK;AACP,aAAK,aAAc,KAAK,KAAK,IAAI,IAAI,KAAK,OAAO,KAAK;AAAA;AAG1D,UAAI,EAAE,KAAK;AACP,aAAK,aAAc,KAAK,KAAK,IAAI,IAAI,KAAK,OAAO,KAAK;AAAA;AAAA;AAK9D,QAAI,KAAK,KAAK,IAAI,IAAI,SAAS;AAC3B,WAAK,aAAc,KAAK,KAAK,IAAI,IAAI,KAAK,OAAO,KAAK;AAAA,eAEjD,KAAK,KAAK,IAAI,IAAI,SAAS;AAChC,WAAK,aAAc,KAAK,KAAK,IAAI,IAAI,KAAK,OAAO,KAAK;AAAA;AAI1D,QAAI,KAAK,KAAK,IAAI,IAAI,SAAS;AAC3B,WAAK,aAAa,KAAK;AAAA;AAI3B,SAAK,aAAa,KAAK,aAAa,mBAChC,KAAK,KAAK,OAAO;AAAA,MACb,GAAI;AAAA,MACJ,GAAI,CAAC,KAAK;AAAA,QACd,GACA,KAAK,KAAK,GACV;AAAA;AAAA,EAID;AAEH,QAAG,KAAK,cAAc;AAClB,WAAK,QAAQ,KAAK;AAAA;AAAA;AAAA,EAKnB;AAEH,WAAO,CAAC,IAAI,GAAG,QAAQ,OAAK,CAAC,IAAI,GAAG,IAAI,OAAK,IAAI,KAAK,GAAE,GACnD,OAAO,KAAK,MACZ,OAAO,KAAK,cAAc,IAAI,KAAK,OAAO,CAAC,GAAI,GAAG,GAAI;AAAA;AAAA;",
  "names": []
}
