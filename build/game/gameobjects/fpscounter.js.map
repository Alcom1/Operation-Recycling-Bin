{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\fpscounter.ts"],
  "sourcesContent": ["import GameObject, { GameObjectParams } from \"engine/gameobjects/gameobject\";\r\n\r\n/** Parameters for an FPS counter */\r\ninterface FPSCounterParams extends GameObjectParams {\r\n    font?: string;\r\n    color?: string;\r\n}\r\n\r\n/** FPS counter, it displays the frames per second */\r\nexport default class FPSCounter extends GameObject {\r\n\r\n    private font: string;\r\n    private color: string;\r\n    private text: string = '';\r\n\r\n    /** Constructor */\r\n    constructor(params: FPSCounterParams) {\r\n        super(params);\r\n        this.font = params.font ?? \"18pt Consolas\";\r\n        this.color = params.color || \"white\";\r\n    }\r\n\r\n    /** Update FPS display text */\r\n    public update(dt: number) {\r\n        // FPS is inverted delta time, measure to a single decimal point.\r\n        let fps = (1 / dt).toFixed(1);\r\n        this.text = \"fps:\" + this.getSpaces(6 - fps.length) + fps;\r\n    }\r\n\r\n    /** Get spaces for FPS display */\r\n    private getSpaces(count: number) : string {\r\n\r\n        var ret = \"\";\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            ret += \" \";\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    /** Draw fps display */\r\n    public draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.textBaseline = \"top\";\r\n        ctx.font = this.font;\r\n        ctx.fillStyle = this.color;\r\n        ctx.fillText(this.text, 0, 1); \r\n    }\r\n}\r\n"],
  "mappings": "AAAA;AAAA,wCASwC;AAAA,EAOpC,YAAY;AACR,UAAM;AAJF,gBAAe;AAKnB,SAAK,OAAO,OAAO,QAAQ;AAC3B,SAAK,QAAQ,OAAO,SAAS;AAAA;AAAA,EAI1B;AAEH,cAAW,KAAI,IAAI,QAAQ;AAC3B,SAAK,OAAO,SAAS,KAAK,UAAU,IAAI,IAAI,UAAU;AAAA;AAAA,EAIlD;AAEJ,cAAU;AAEV,iBAAa,GAAG,IAAI,OAAO;AACvB,aAAO;AAAA;AAGX,WAAO;AAAA;AAAA,EAIJ;AACH,QAAI,eAAe;AACnB,QAAI,OAAO,KAAK;AAChB,QAAI,YAAY,KAAK;AACrB,QAAI,SAAS,KAAK,MAAM,GAAG;AAAA;AAAA;",
  "names": []
}
