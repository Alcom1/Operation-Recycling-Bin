{
  "version": 3,
  "sources": ["/home/jonathan/Development/lego/Operation-Recycling-Bin/src/game/gameobjects/brickstud.ts"],
  "sourcesContent": ["import Engine from \"engine/engine\";\nimport GameObject, { GameObjectParams } from \"engine/gameobjects/gameobject\";\nimport Scene from \"engine/scene/scene\";\nimport { colorAdd, colorMult, colorTranslate, GMULTX, GMULTY, STUD_HEIGHT, STUD_RADIUS, UNDER_CURSOR_Z_INDEX, Z_DEPTH } from \"engine/utilities/math\";\n\ninterface BrickStudParams extends GameObjectParams {\n    color?: string;\n}\n\n/** Series of studs for a brick */\nexport default class BrickStud extends GameObject {\n    color: string;\n    colorDark: string;\n    colorBright: string;\n    isGrey: boolean;\n\n    image = new Image();\n\n    isPressed = false;\n    isSelected = false;\n    isSnapped = false;\n    isVisible = true;\n\n    constructor(engine: Engine, params: BrickStudParams) {\n        super(engine, params);\n\n        this.color = colorTranslate(params.color);\n        this.colorDark = colorMult(this.color, 0.625);\n        this.colorBright = colorAdd(this.color, 48);\n        this.isGrey = !params.color;\n\n        this.zIndex =          // Z-sort vertically and then horizontally.\n            this.gpos.x * 2 -  // 2x multiplier for stud overlap\n            this.gpos.y * 100  // Y-pos has priority over X-pos.\n            + 1;               // Plus one for stud overlap\n\n        // Bake image of stud\n        this.image.src = this.engine.baker.bake(\n            ctx => this.drawBrickStud(ctx),\n            // Width/height to contain both stud images\n            GMULTX * 2,\n            Z_DEPTH * 2,\n            \"STUD.\" + this.color\n        );\n    }\n\n    public draw(ctx: CanvasRenderingContext2D): void {\n        if(this.isVisible) {\n            // Global transparency for selection states\n            ctx.globalAlpha =\n                this.isSnapped ? 0.75:  // Snapped studs are transparent\n                this.isSelected ? 0.5:  // Selected studs are more transparent\n                this.isPressed ? 0.75:  // Pressed studs are less transparent again\n                1.0;                    // Otherwise opaque if not selected or pressed\n            \n            // Draw the stored image for this stud\n            ctx.drawImage(this.image, Z_DEPTH - 13.5, 0);\n        }\n    }\n\n    /** Set this stud's snap state */\n    public snap(state: boolean): void {\n        if (state) {\n            this.isSnapped = true;\n            this.zIndex =\n               (this.gpos.x + Math.round(this.spos.x / GMULTX)) * 2 -   // 2x multiplier for stud overlap\n               (this.gpos.y + Math.round(this.spos.y / GMULTY)) * 100 + // Y-pos has priority over X-pos.\n               1;                                                       // Plus one for stud overlap\n        }\n        else {\n            this.isSnapped = false;\n            // Set Z-index for dragging\n            this.zIndex = UNDER_CURSOR_Z_INDEX;\n        }\n    }\n\n    /** Setup this stud for pressing */\n    public press(): void {\n        this.isPressed = true;\n    }\n\n    // Setup this stud for selecting\n    public select(): void {\n        this.isSelected = true;\n        this.zIndex = UNDER_CURSOR_Z_INDEX;\n    }\n\n    /** Reset this stud's z-index */\n    public deselect(): void {\n        this.zIndex =               // Z-sort vertically and then horizontally.\n            this.gpos.x * 2 -       // 2x multiplier for stud overlap\n            this.gpos.y * 100 +     // Y-pos has priority over X-pos.\n            1;                      // Plus one for stud overlap\n        \n        this.isPressed = false;\n        this.isSelected = false;\n        this.isSnapped = false;\n    }\n\n    /** Draw sequence for this stud. */\n    private drawBrickStud(ctx: CanvasRenderingContext2D): void {\n        // Offset for baked drawing.\n        ctx.translate(12.5, GMULTY);\n\n        // Stud\n        for (let i = 1; i >= 0; i--) {\n            // Individual stud offset\n            const off = i * STUD_HEIGHT * 2;\n\n            // Stud column style\n            const gradient = ctx.createLinearGradient(off - STUD_RADIUS, 0, off + STUD_RADIUS, 0); // Gradient for stud column\n            gradient.addColorStop(0, this.color);                                                  // Gradient light shading\n            gradient.addColorStop(1, this.colorDark);                                              // Gradient dark shading\n            ctx.fillStyle = gradient;\n\n            // Stud column\n            ctx.beginPath();\n            ctx.ellipse(off, -STUD_HEIGHT     - off, STUD_RADIUS, STUD_RADIUS * 0.36, 0, 0, Math.PI);  //Bottom of column\n            ctx.ellipse(off, -STUD_HEIGHT * 2 - off, STUD_RADIUS, STUD_RADIUS * 0.36, 0, Math.PI, 0);  //Top of column\n            ctx.fill();\n\n            // Stud top style\n            ctx.fillStyle = this.colorBright;\n\n            // Stud top\n            ctx.beginPath();\n            ctx.ellipse(off, -STUD_HEIGHT * 2 - off, STUD_RADIUS, STUD_RADIUS * 0.36, 0, 0, 2 * Math.PI);\n            ctx.fill();\n\n            // Draw holes in studs if they are grey\n            if(this.isGrey) {\n                // Stud grey hole style\n                ctx.fillStyle = this.color;\n\n                // Stud grey hole\n                ctx.beginPath();\n                ctx.ellipse(off, -STUD_HEIGHT * 2 - off, STUD_RADIUS * 0.6, STUD_RADIUS * 0.216, 0, 0, 2 * Math.PI);\n                ctx.fill();\n            }\n        }\n    }\n}"],
  "mappings": "AACA;AAEA;AAHA,uCAUuC;AAAA,EAanC,YAAY;AACR,UAAM,SAAQ;AARlB,iBAAQ,IAAI;AAEZ,qBAAY;AACZ,sBAAa;AACb,qBAAY;AACZ,qBAAY;AAKR,SAAK,QAAQ,eAAe,OAAO;AACnC,SAAK,YAAY,UAAU,KAAK,OAAO;AACvC,SAAK,cAAc,SAAS,KAAK,OAAO;AACxC,SAAK,SAAS,CAAC,OAAO;AAEtB,SAAK,SACD,KAAK,KAAK,IAAI,IACd,KAAK,KAAK,IAAI,MACZ;AAGN,SAAK,MAAM,MAAM,KAAK,OAAO,MAAM,KAC/B,SAAO,KAAK,cAAc,MAE1B,SAAS,GACT,UAAU,GACV,UAAU,KAAK;AAAA;AAAA,EAIhB;AACH,QAAG,KAAK;AAEJ,UAAI,cACA,KAAK,YAAY,OACjB,KAAK,aAAa,MAClB,KAAK,YAAY,OACjB;AAGJ,UAAI,UAAU,KAAK,OAAO,UAAU,MAAM;AAAA;AAAA;AAAA,EAK3C;AACH,QAAI;AACA,WAAK,YAAY;AACjB,WAAK,SACD,MAAK,KAAK,IAAI,KAAK,MAAM,KAAK,KAAK,IAAI,WAAW,IAClD,MAAK,KAAK,IAAI,KAAK,MAAM,KAAK,KAAK,IAAI,WAAW,MACnD;AAAA;AAGH,WAAK,YAAY;AAEjB,WAAK,SAAS;AAAA;AAAA;AAAA,EAKf;AACH,SAAK,YAAY;AAAA;AAAA,EAId;AACH,SAAK,aAAa;AAClB,SAAK,SAAS;AAAA;AAAA,EAIX;AACH,SAAK,SACD,KAAK,KAAK,IAAI,IACd,KAAK,KAAK,IAAI,MACd;AAEJ,SAAK,YAAY;AACjB,SAAK,aAAa;AAClB,SAAK,YAAY;AAAA;AAAA,EAIb;AAEJ,QAAI,UAAU,MAAM;AAGpB,iBAAa,GAAG,KAAK,GAAG;AAEpB,kBAAY,IAAI,cAAc;AAG9B,uBAAiB,IAAI,qBAAqB,MAAM,aAAa,GAAG,MAAM,aAAa;AACnF,eAAS,aAAa,GAAG,KAAK;AAC9B,eAAS,aAAa,GAAG,KAAK;AAC9B,UAAI,YAAY;AAGhB,UAAI;AACJ,UAAI,QAAQ,KAAK,CAAC,cAAkB,KAAK,aAAa,cAAc,MAAM,GAAG,GAAG,KAAK;AACrF,UAAI,QAAQ,KAAK,CAAC,cAAc,IAAI,KAAK,aAAa,cAAc,MAAM,GAAG,KAAK,IAAI;AACtF,UAAI;AAGJ,UAAI,YAAY,KAAK;AAGrB,UAAI;AACJ,UAAI,QAAQ,KAAK,CAAC,cAAc,IAAI,KAAK,aAAa,cAAc,MAAM,GAAG,GAAG,IAAI,KAAK;AACzF,UAAI;AAGJ,UAAG,KAAK;AAEJ,YAAI,YAAY,KAAK;AAGrB,YAAI;AACJ,YAAI,QAAQ,KAAK,CAAC,cAAc,IAAI,KAAK,cAAc,KAAK,cAAc,OAAO,GAAG,GAAG,IAAI,KAAK;AAChG,YAAI;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
