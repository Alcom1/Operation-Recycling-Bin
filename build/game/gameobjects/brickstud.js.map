{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\brickstud.ts"],
  "sourcesContent": ["import Engine from \"engine/engine\";\r\nimport GameObject, { GameObjectParams } from \"engine/gameobjects/gameobject\";\r\nimport Scene from \"engine/scene/scene\";\r\nimport { colorAdd, colorMult, colorTranslate, GMULTX, GMULTY, STUD_HEIGHT, STUD_RADIUS, UNDER_CURSOR_Z_INDEX, Z_DEPTH } from \"engine/utilities/math\";\r\n\r\ninterface BrickStudParams extends GameObjectParams {\r\n    color?: string;\r\n}\r\n\r\n/** Series of studs for a brick */\r\nexport default class BrickStud extends GameObject {\r\n    color: string;\r\n    colorDark: string;\r\n    colorBright: string;\r\n    isGrey: boolean;\r\n\r\n    image = new Image();\r\n\r\n    isPressed = false;\r\n    isSelected = false;\r\n    isSnapped = false;\r\n    isVisible = true;\r\n\r\n    constructor(engine: Engine, params: BrickStudParams) {\r\n        super(engine, params);\r\n\r\n        this.color = colorTranslate(params.color);\r\n        this.colorDark = colorMult(this.color, 0.625);\r\n        this.colorBright = colorAdd(this.color, 48);\r\n        this.isGrey = !params.color;\r\n\r\n        this.zIndex =          // Z-sort vertically and then horizontally.\r\n            this.gpos.x * 2 -  // 2x multiplier for stud overlap\r\n            this.gpos.y * 100  // Y-pos has priority over X-pos.\r\n            + 1;               // Plus one for stud overlap\r\n\r\n        // Bake image of stud\r\n        this.image.src = this.engine.baker.bake(\r\n            ctx => this.drawBrickStud(ctx),\r\n            // Width/height to contain both stud images\r\n            GMULTX * 2,\r\n            Z_DEPTH * 2,\r\n            \"STUD.\" + this.color\r\n        );\r\n    }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D): void {\r\n        if(this.isVisible) {\r\n            // Global transparency for selection states\r\n            ctx.globalAlpha =\r\n                this.isSnapped ? 0.75:  // Snapped studs are transparent\r\n                this.isSelected ? 0.5:  // Selected studs are more transparent\r\n                this.isPressed ? 0.75:  // Pressed studs are less transparent again\r\n                1.0;                    // Otherwise opaque if not selected or pressed\r\n            \r\n            // Draw the stored image for this stud\r\n            ctx.drawImage(this.image, Z_DEPTH - 13.5, 0);\r\n        }\r\n    }\r\n\r\n    /** Set this stud's snap state */\r\n    public snap(state: boolean): void {\r\n        if (state) {\r\n            this.isSnapped = true;\r\n            this.zIndex =\r\n               (this.gpos.x + Math.round(this.spos.x / GMULTX)) * 2 -   // 2x multiplier for stud overlap\r\n               (this.gpos.y + Math.round(this.spos.y / GMULTY)) * 100 + // Y-pos has priority over X-pos.\r\n               1;                                                       // Plus one for stud overlap\r\n        }\r\n        else {\r\n            this.isSnapped = false;\r\n            // Set Z-index for dragging\r\n            this.zIndex = UNDER_CURSOR_Z_INDEX;\r\n        }\r\n    }\r\n\r\n    /** Setup this stud for pressing */\r\n    public press(): void {\r\n        this.isPressed = true;\r\n    }\r\n\r\n    // Setup this stud for selecting\r\n    public select(): void {\r\n        this.isSelected = true;\r\n        this.zIndex = UNDER_CURSOR_Z_INDEX;\r\n    }\r\n\r\n    /** Reset this stud's z-index */\r\n    public deselect(): void {\r\n        this.zIndex =               // Z-sort vertically and then horizontally.\r\n            this.gpos.x * 2 -       // 2x multiplier for stud overlap\r\n            this.gpos.y * 100 +     // Y-pos has priority over X-pos.\r\n            1;                      // Plus one for stud overlap\r\n        \r\n        this.isPressed = false;\r\n        this.isSelected = false;\r\n        this.isSnapped = false;\r\n    }\r\n\r\n    /** Draw sequence for this stud. */\r\n    private drawBrickStud(ctx: CanvasRenderingContext2D): void {\r\n        // Offset for baked drawing.\r\n        ctx.translate(12.5, GMULTY);\r\n\r\n        // Stud\r\n        for (let i = 1; i >= 0; i--) {\r\n            // Individual stud offset\r\n            const off = i * STUD_HEIGHT * 2;\r\n\r\n            // Stud column style\r\n            const gradient = ctx.createLinearGradient(off - STUD_RADIUS, 0, off + STUD_RADIUS, 0); // Gradient for stud column\r\n            gradient.addColorStop(0, this.color);                                                  // Gradient light shading\r\n            gradient.addColorStop(1, this.colorDark);                                              // Gradient dark shading\r\n            ctx.fillStyle = gradient;\r\n\r\n            // Stud column\r\n            ctx.beginPath();\r\n            ctx.ellipse(off, -STUD_HEIGHT     - off, STUD_RADIUS, STUD_RADIUS * 0.36, 0, 0, Math.PI);  //Bottom of column\r\n            ctx.ellipse(off, -STUD_HEIGHT * 2 - off, STUD_RADIUS, STUD_RADIUS * 0.36, 0, Math.PI, 0);  //Top of column\r\n            ctx.fill();\r\n\r\n            // Stud top style\r\n            ctx.fillStyle = this.colorBright;\r\n\r\n            // Stud top\r\n            ctx.beginPath();\r\n            ctx.ellipse(off, -STUD_HEIGHT * 2 - off, STUD_RADIUS, STUD_RADIUS * 0.36, 0, 0, 2 * Math.PI);\r\n            ctx.fill();\r\n\r\n            // Draw holes in studs if they are grey\r\n            if(this.isGrey) {\r\n                // Stud grey hole style\r\n                ctx.fillStyle = this.color;\r\n\r\n                // Stud grey hole\r\n                ctx.beginPath();\r\n                ctx.ellipse(off, -STUD_HEIGHT * 2 - off, STUD_RADIUS * 0.6, STUD_RADIUS * 0.216, 0, 0, 2 * Math.PI);\r\n                ctx.fill();\r\n            }\r\n        }\r\n    }\r\n}"],
  "mappings": "AACA;AAEA;AAHA,uCAUuC;AAAA,EAanC,YAAY;AACR,UAAM,SAAQ;AARlB,iBAAQ,IAAI;AAEZ,qBAAY;AACZ,sBAAa;AACb,qBAAY;AACZ,qBAAY;AAKR,SAAK,QAAQ,eAAe,OAAO;AACnC,SAAK,YAAY,UAAU,KAAK,OAAO;AACvC,SAAK,cAAc,SAAS,KAAK,OAAO;AACxC,SAAK,SAAS,CAAC,OAAO;AAEtB,SAAK,SACD,KAAK,KAAK,IAAI,IACd,KAAK,KAAK,IAAI,MACZ;AAGN,SAAK,MAAM,MAAM,KAAK,OAAO,MAAM,KAC/B,SAAO,KAAK,cAAc,MAE1B,SAAS,GACT,UAAU,GACV,UAAU,KAAK;AAAA;AAAA,EAIhB;AACH,QAAG,KAAK;AAEJ,UAAI,cACA,KAAK,YAAY,OACjB,KAAK,aAAa,MAClB,KAAK,YAAY,OACjB;AAGJ,UAAI,UAAU,KAAK,OAAO,UAAU,MAAM;AAAA;AAAA;AAAA,EAK3C;AACH,QAAI;AACA,WAAK,YAAY;AACjB,WAAK,SACD,MAAK,KAAK,IAAI,KAAK,MAAM,KAAK,KAAK,IAAI,WAAW,IAClD,MAAK,KAAK,IAAI,KAAK,MAAM,KAAK,KAAK,IAAI,WAAW,MACnD;AAAA;AAGH,WAAK,YAAY;AAEjB,WAAK,SAAS;AAAA;AAAA;AAAA,EAKf;AACH,SAAK,YAAY;AAAA;AAAA,EAId;AACH,SAAK,aAAa;AAClB,SAAK,SAAS;AAAA;AAAA,EAIX;AACH,SAAK,SACD,KAAK,KAAK,IAAI,IACd,KAAK,KAAK,IAAI,MACd;AAEJ,SAAK,YAAY;AACjB,SAAK,aAAa;AAClB,SAAK,YAAY;AAAA;AAAA,EAIb;AAEJ,QAAI,UAAU,MAAM;AAGpB,iBAAa,GAAG,KAAK,GAAG;AAEpB,kBAAY,IAAI,cAAc;AAG9B,uBAAiB,IAAI,qBAAqB,MAAM,aAAa,GAAG,MAAM,aAAa;AACnF,eAAS,aAAa,GAAG,KAAK;AAC9B,eAAS,aAAa,GAAG,KAAK;AAC9B,UAAI,YAAY;AAGhB,UAAI;AACJ,UAAI,QAAQ,KAAK,CAAC,cAAkB,KAAK,aAAa,cAAc,MAAM,GAAG,GAAG,KAAK;AACrF,UAAI,QAAQ,KAAK,CAAC,cAAc,IAAI,KAAK,aAAa,cAAc,MAAM,GAAG,KAAK,IAAI;AACtF,UAAI;AAGJ,UAAI,YAAY,KAAK;AAGrB,UAAI;AACJ,UAAI,QAAQ,KAAK,CAAC,cAAc,IAAI,KAAK,aAAa,cAAc,MAAM,GAAG,GAAG,IAAI,KAAK;AACzF,UAAI;AAGJ,UAAG,KAAK;AAEJ,YAAI,YAAY,KAAK;AAGrB,YAAI;AACJ,YAAI,QAAQ,KAAK,CAAC,cAAc,IAAI,KAAK,cAAc,KAAK,cAAc,OAAO,GAAG,GAAG,IAAI,KAAK;AAChG,YAAI;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
