{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\brickhandlerdebug.ts"],
  "sourcesContent": ["import GameObject, { GameObjectParams } from \"engine/gameobjects/gameobject\";\r\nimport { GMULTX, GMULTY } from \"engine/utilities/math\";\r\nimport { Point } from \"engine/utilities/vect\";\r\nimport BrickHandler from \"./brickhandler\";\r\n\r\ninterface PointDebug extends Point {\r\n    opacity : number;\r\n}\r\n\r\nexport default class BrickHandlerDebug extends BrickHandler {\r\n\r\n    private debugPoints : PointDebug[] = [];\r\n\r\n    constructor(params: GameObjectParams) {\r\n        super(params);\r\n\r\n        this.tags.push(\"BrickHandler\"); //Treat this as a regular brick handler\r\n    }\r\n\r\n    //Update, fade older debug points\r\n    public update(dt: number) {\r\n        this.debugPoints.forEach(dp => dp.opacity -= dt * 2);               //Fade debug points\r\n        this.debugPoints = this.debugPoints.filter(dp => dp.opacity > 0);   //Remove debug points after they disappear\r\n    }\r\n\r\n    //Draw debug points\r\n    public draw(ctx: CanvasRenderingContext2D) {\r\n\r\n        ctx.fillStyle = \"#0FF\"\r\n\r\n        this.debugPoints.forEach(dp => {\r\n            ctx.globalAlpha = dp.opacity;\r\n            ctx.fillRect(\r\n                GMULTX * dp.x + 4,\r\n                GMULTY * dp.y + 4,\r\n                GMULTX - 8,\r\n                GMULTY - 8\r\n            );\r\n        });\r\n    }\r\n\r\n    /** Check collisons for a vertically-looping range and return a bitmask */\r\n    public checkCollisionRange(pos: Point, dir: number, start: number, final: number, height: number, width: number = 2): number {\r\n\r\n        //Create new debug points from this collision\r\n        for(let i = start; i < final; i++) {\r\n            this.debugPoints.push({\r\n                x : pos.x + Math.floor(i / height) % width  * dir,  //Wrap by width to go back and check ceiling\r\n                y : pos.y + i % height + 1,                         //Wrap by height\r\n                opacity : 1\r\n            });\r\n        }\r\n\r\n        //Perform actual collision check\r\n        return super.checkCollisionRange(pos, dir, start, final, height, width);\r\n    }\r\n}\r\n"],
  "mappings": "AACA;AAEA;AAHA,+CAS+C;AAAA,EAI3C,YAAY;AACR,UAAM;AAHF,uBAA6B;AAKjC,SAAK,KAAK,KAAK;AAAA;AAAA,EAIZ;AACH,SAAK,YAAY,QAAQ,QAAM,GAAG,WAAW,KAAK;AAClD,SAAK,cAAc,KAAK,YAAY,OAAO,QAAM,GAAG,UAAU;AAAA;AAAA,EAI3D;AAEH,QAAI,YAAY;AAEhB,SAAK,YAAY,QAAQ;AACrB,UAAI,cAAc,GAAG;AACrB,UAAI,SACA,SAAS,GAAG,IAAI,GAChB,SAAS,GAAG,IAAI,GAChB,SAAS,GACT,SAAS;AAAA;AAAA;AAAA,EAMd,4DAA2G;AAG9G,iBAAY,OAAO,IAAI,OAAO;AAC1B,WAAK,YAAY,KAAK;AAAA,QAClB,GAAI,IAAI,IAAI,KAAK,MAAM,IAAI,UAAU,QAAS;AAAA,QAC9C,GAAI,IAAI,IAAI,IAAI,SAAS;AAAA,QACzB,SAAU;AAAA;AAAA;AAKlB,WAAO,MAAM,oBAAoB,KAAK,KAAK,OAAO,OAAO,QAAQ;AAAA;AAAA;",
  "names": []
}
