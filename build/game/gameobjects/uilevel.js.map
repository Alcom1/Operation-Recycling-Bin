{
  "version": 3,
  "sources": ["/home/jonathan/Development/lego/Operation-Recycling-Bin/src/game/gameobjects/uilevel.ts"],
  "sourcesContent": ["import Engine from \"engine/engine\";\nimport GameObject, { GameObjectParams } from \"engine/gameobjects/gameobject\";\nimport Scene from \"engine/scene/scene\";\nimport { BOUNDARY, colorAdd, colorMult, colorTranslate, GMULTX, GMULTY, LINE_WIDTH, Z_DEPTH } from \"engine/utilities/math\";\n\nexport default class UILevel extends GameObject {\n    private color: string;\n    private colorDark: string;\n    private colorBright: string;\n\n    private colorCeiling: string;\n    private colorCeilingDark: string;\n    private colorCeilingBright: string;\n\n    private logoColor: string = '#747474';\n\n    private image = new Image();\n\n    constructor(engine: Engine, params: GameObjectParams) {\n        super(engine, params);\n\n        this.color = colorTranslate();\n        this.colorDark = colorMult(this.color, 0.625)\n        this.colorBright = colorAdd(this.color, 48);\n\n        this.colorCeiling = colorTranslate('black');\n        this.colorCeilingDark = colorMult(this.colorCeiling, 0.625);\n        this.colorCeilingBright = colorAdd(this.colorCeiling, 48);\n\n        this.image.src = this.engine.baker.bake(ctx => this.drawBackground(ctx));\n    }\n\n    public draw(ctx: CanvasRenderingContext2D): void {\n        ctx.drawImage(this.image, 0, 0);\n    }\n\n    /** Draw the level UI background */\n    private drawBackground(ctx: CanvasRenderingContext2D): void {\n        // Draw sidebar\n        ctx.save();\n        this.drawSidebar(ctx);\n        ctx.restore();\n\n        // Draw ceiling\n        ctx.save();\n        this.drawCeiling(ctx);\n        ctx.restore();\n\n        // Draw logo\n        ctx.save();\n        this.drawLogo(ctx);\n        ctx.restore();\n    }\n\n    /** Draw the sidebar menu */\n    private drawSidebar(ctx: CanvasRenderingContext2D): void {\n        // Main UI color\n        ctx.fillStyle = this.color;\n\n        // UI side rect\n        ctx.beginPath();\n        ctx.fillRect(\n                                GMULTX * (BOUNDARY.maxx) + Z_DEPTH / 2,     // xpos\n                                GMULTY,                                     // ypos\n            ctx.canvas.width -  GMULTX * (BOUNDARY.maxx),                   // width\n            ctx.canvas.height - GMULTY                                      // height\n        );\n\n        // Translate for lower brick\n        ctx.translate(\n            GMULTX * BOUNDARY.maxx,                                         // Translate-x\n            GMULTY * (BOUNDARY.maxy - 1));                                  // Translate-y\n\n        // Lower brick front face\n        ctx.fillRect(                                                       // Rectangle for front face\n            0,                                                              // Origin\n            0,                                                              // Origin\n            GMULTX * 9,                                                     // Brick width\n            GMULTY                                                          // Brick height\n        );\n\n        // Top face style\n        ctx.fillStyle = this.colorBright;\n\n        // Top face\n        ctx.beginPath();\n        ctx.moveTo(0,                       0);                             // Lower left corner\n        ctx.lineTo(Z_DEPTH / 2,  -Z_DEPTH / 2);                             // Upper left corner\n        ctx.lineTo(ctx.canvas.width,        -Z_DEPTH);                      // Upper right corner\n        ctx.lineTo(ctx.canvas.width,        0);                             // Lower right corner\n        ctx.fill(); \n\n        // UI Border style   \n        ctx.strokeStyle = this.colorBright;                                 // Stroke dark color\n        ctx.lineWidth = LINE_WIDTH;                                         // Line width\n        ctx.lineCap = \"square\";                                             // Square corners\n\n        // Light plate border color\n        ctx.strokeStyle = this.colorBright;\n\n        // Light plate border\n        ctx.beginPath();\n        ctx.moveTo(LINE_WIDTH * 1.5, GMULTY / 3);                           // Border start\n        ctx.lineTo(ctx.canvas.width, GMULTY / 3);                           // Border end\n        ctx.stroke();\n\n        // Dark plate border color\n        ctx.strokeStyle = this.colorDark;\n\n        // Dark plate border\n        ctx.beginPath();\n        ctx.moveTo(LINE_WIDTH,       GMULTY / 3 - LINE_WIDTH / 2);          // Left pseudo-pixel\n        ctx.lineTo(LINE_WIDTH * 1.5, GMULTY / 3 - LINE_WIDTH);              // Border start\n        ctx.lineTo(ctx.canvas.width, GMULTY / 3 - LINE_WIDTH);              // Border end\n        ctx.stroke();\n\n        // Border\n        ctx.beginPath();\n        ctx.moveTo(Z_DEPTH    / 2,   -GMULTY * (BOUNDARY.maxy - 3) - Z_DEPTH / 2);      // Upper right border far\n        ctx.lineTo(Z_DEPTH    / 2,                                 - Z_DEPTH / 2);      // Upper left corner (back)                                                                                // Start path\n        ctx.lineTo(LINE_WIDTH / 2,   0);                                                // Upper left corner\n        ctx.lineTo(LINE_WIDTH / 2,   GMULTY                        - LINE_WIDTH / 2);   // Lower left corner\n        ctx.lineTo(ctx.canvas.width, GMULTY                        - LINE_WIDTH / 2);   // Lower right corner\n        ctx.stroke();\n\n        // Depth Border color\n        ctx.strokeStyle = this.color;\n\n        // Depth Border\n        ctx.beginPath();\n        ctx.moveTo(Z_DEPTH    / 2,   -Z_DEPTH / 2);   // Upper left corner (back)\n        ctx.lineTo(LINE_WIDTH / 2,   0);              // Upper left corner\n        ctx.stroke();\n    }\n\n    /** Draw the universal ceiling */\n    private drawCeiling(ctx: CanvasRenderingContext2D): void {\n        // Reset transform to draw from the top-left corner\n        var ceilOffsetU = GMULTY / 3 * 4;                   // Upper edge of ceiling\n        var ceilOffsetL = GMULTY / 3 * 5;                   // Lower edge of ceiling\n        var ceilOffsetB = ceilOffsetU - Z_DEPTH;            // Back edge of ceiling\n\n        // Ceiling front face color\n        ctx.fillStyle = this.colorCeiling;\n\n        // Ceiling front face\n        ctx.fillRect(\n            0,                                                          // xpos\n            ceilOffsetU,                                                // ypos\n            ctx.canvas.width,                                           // width\n            ceilOffsetL - ceilOffsetU                                   // height\n        );\n\n        // Ceiling top face color\n        ctx.fillStyle = this.colorCeilingBright;\n\n        // Ceiling top face\n        ctx.beginPath();\n        ctx.moveTo(0,                  ceilOffsetU);                    // Lower left\n        ctx.lineTo(Z_DEPTH,            ceilOffsetB);                    // Upper left\n        ctx.lineTo(ctx.canvas.width,   ceilOffsetB);                    // Upper right\n        ctx.lineTo(ctx.canvas.width,   ceilOffsetU);                    // Lower right\n        ctx.fill();\n\n        // Ceiling bottom line color\n        ctx.strokeStyle = this.colorCeilingDark;\n\n        // Ceiling bottom line\n        ctx.beginPath();\n        ctx.moveTo(0,                ceilOffsetL);                      // Left side\n        ctx.lineTo(ctx.canvas.width, ceilOffsetL);                      // Right side\n        ctx.stroke();\n\n        // Draw ceiling lines across the width of the canvas\n        for (let i = LINE_WIDTH / 2; i < ctx.canvas.width;) {\n            // Top line color\n            ctx.strokeStyle = this.colorCeiling;\n\n            // Top line\n            ctx.beginPath();\n            ctx.moveTo(i + Z_DEPTH - LINE_WIDTH, ceilOffsetB + LINE_WIDTH);  // Top line upper\n            ctx.lineTo(i,                        ceilOffsetU);               // Top line lower\n            ctx.stroke();   \n\n            // Front line color  \n            ctx.strokeStyle = this.colorCeilingDark;    \n\n            // Front line    \n            ctx.beginPath();    \n            ctx.moveTo(i, ceilOffsetU + LINE_WIDTH / 2);     // Front line upper\n            ctx.lineTo(i, ceilOffsetL);                      // Front line lower\n            ctx.stroke();   \n\n            // Increment for set of lines\n            i += 4 * GMULTX;\n        }\n\n        // Upper UI rect fill and border colors\n        ctx.strokeStyle = this.colorCeiling;\n \n        // Upper UI rect\n        ctx.beginPath();\n        ctx.moveTo(Z_DEPTH,           ceilOffsetB + LINE_WIDTH / 2);    // Left side\n        ctx.lineTo(ctx.canvas.width,  ceilOffsetB + LINE_WIDTH / 2);    // Right side\n        ctx.stroke();\n    }\n\n    /** Draw the recyle logo on the sidebar */\n    private drawLogo(ctx: CanvasRenderingContext2D): void {\n        // Translate to logo center\n        ctx.translate(        \n            ctx.canvas.width / 2 +\n            BOUNDARY.maxx * GMULTX / 2 +\n            Z_DEPTH / 4,\n            175\n        );\n\n        // Draw 4 arrows of logo\n        for (let i = 0; i < 4; i++) {\n\n            // Logo color\n            ctx.fillStyle = this.logoColor;\n\n            var logoStart = 10; // Starting point of the logo arrow\n            var logoWidth = 64; // Width of the logo\n            var logoThick = 17; // Thickness of the logo arrows\n            var logoPoint = 28; // Depth of the logo arrow points\n\n            // Draw logo arrow\n            ctx.beginPath();\n            ctx.moveTo(logoStart,             logoWidth - logoThick);   // Bruh do you think SVG would have been better for all of this?\n            ctx.lineTo(logoWidth - logoThick, logoWidth - logoThick);   \n            ctx.lineTo(logoWidth - logoThick, logoPoint);\n            ctx.lineTo(logoWidth / 2,         logoPoint);\n            ctx.lineTo(logoWidth,            -logoStart / 2);\n            ctx.lineTo(logoWidth / 2 * 3,     logoPoint);\n            ctx.lineTo(logoWidth + logoThick, logoPoint);\n            ctx.lineTo(logoWidth + logoThick, logoWidth + logoThick);   // Nah\n            ctx.lineTo(logoStart,             logoWidth + logoThick);\n            ctx.fill();\n\n            // Rotate 90 degrees for the next arrow\n            ctx.rotate(Math.PI / 2);\n        }\n    }\n}"],
  "mappings": "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",
  "names": []
}
