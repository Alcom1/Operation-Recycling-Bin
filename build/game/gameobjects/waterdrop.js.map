{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\waterdrop.ts"],
  "sourcesContent": ["import { GameObjectParams } from \"engine/gameobjects/gameobject\";\r\nimport { Collider } from \"engine/modules/collision\";\r\nimport { BOUNDARY, Faction, GMULTX, GMULTY, MASKS } from \"engine/utilities/math\";\r\nimport Vect from \"engine/utilities/vect\";\r\nimport Anim, { AnimationParams } from \"./anim\";\r\nimport BrickHandler from \"./brickhandler\";\r\nimport Sprite from \"./sprite\";\r\n\r\n/** Specifications of a water drop */\r\nconst waterDropOverride = Object.freeze({\r\n    image: \"part_water\",\r\n    zIndex: 0,\r\n});\r\n\r\n/** Single image gameobject */\r\nexport default class WaterDrop extends Sprite {\r\n    private speed : number = 500;\r\n    private brickHandler! : BrickHandler;\r\n    private animLand: Anim;\r\n    private animSlip: Anim;\r\n    private slipDuration : number = 0.4;\r\n    private slipTimer: number = 0;\r\n\r\n    /** Constructor */\r\n    constructor(params: GameObjectParams) {\r\n        super(Object.assign(params, waterDropOverride));\r\n\r\n        this.zIndex = 2500; //Big Z-index, should be in front of everything\r\n\r\n        this.animLand = this.parent.pushGO(new Anim({\r\n            ...params,\r\n            zIndex : this.zIndex,\r\n            images : [{ name : \"part_water_land\" }],\r\n            speed : 2.5,\r\n            frameCount : 6,\r\n            isVert : true,\r\n            isActive : false,\r\n            isLoop : false\r\n        } as AnimationParams)) as Anim;\r\n\r\n        this.animSlip = this.parent.pushGO(new Anim({\r\n            ...params,\r\n            zIndex : this.zIndex,\r\n            images : [{ name : \"part_water_slip\" }],\r\n            speed : 1 / this.slipDuration,\r\n            frameCount : 6,\r\n            isVert : true,\r\n            isActive : false,\r\n            isLoop : false\r\n        } as AnimationParams)) as Anim;\r\n\r\n        this.isActive = false;  // Start deactivated\r\n    }\r\n\r\n    /** Get brick handler for brick collisions */\r\n    public init() {\r\n\r\n        // Get brick handler to to check brick-wind collisions\r\n        this.brickHandler = this.engine.tag.get(\r\n            \"BrickHandler\", \r\n            \"LevelInterface\")[0] as BrickHandler;\r\n    }\r\n\r\n    /** Move waterdrop down. */\r\n    public update(dt : number) {\r\n\r\n        if (this.slipTimer < this.slipDuration) {\r\n            this.slipTimer += dt;\r\n            return;\r\n        }\r\n        else {\r\n            this.animSlip.isActive = false;\r\n        }\r\n\r\n        this.spos.y += dt * this.speed;\r\n\r\n        if (this.spos.y > GMULTY) {\r\n            this.spos.y -= GMULTY;\r\n            this.gpos.y += 1;\r\n\r\n            // Collide with lower boundary or bricks\r\n            if (this.gpos.y > BOUNDARY.maxy || \r\n                this.brickHandler.checkCollisionRange(\r\n                this.gpos,  // Position\r\n                1,          // Direction\r\n                0,          // START\r\n                2,          // FINAL\r\n                1,          // HEIGHT\r\n                undefined,\r\n                Faction.HOSTILE))\r\n                {\r\n                      \r\n\r\n                this.doLandAnimation();\r\n            } \r\n        }\r\n    }\r\n\r\n    /** Draw only after slip animation ends */\r\n    public draw(ctx : CanvasRenderingContext2D) {\r\n        if (this.slipTimer >= this.slipDuration) {\r\n            super.draw(ctx);\r\n        }\r\n    }\r\n\r\n    /** Reset and spawn this waterdrop. */\r\n    public reset(gpos : Vect) {\r\n\r\n        this.isActive = true;\r\n        this.gpos = gpos.get();\r\n        this.spos.setToZero();\r\n        this.slipTimer = 0;\r\n        this.animSlip.isActive = true;\r\n        this.animSlip.reset(this.gpos);\r\n    }\r\n\r\n    /** Remove this waterdrop upon collision */\r\n    public resolveCollision() {\r\n        this.doLandAnimation();\r\n    }\r\n\r\n    /** Perform a waterdrop landing animation */\r\n    private doLandAnimation() {\r\n\r\n        this.isActive = false;\r\n        this.animLand.isActive = true;\r\n        this.animLand.reset(this.gpos);\r\n    }\r\n\r\n    /** Get hazard and passive colliders of this brick. */\r\n    public getColliders() : Collider[] {\r\n\r\n        // Return hazard hitbox\r\n        return [{\r\n            mask : MASKS.water | MASKS.death,\r\n            min : this.gpos,\r\n            max : this.gpos.getAdd({ x : 2, y :  1}) \r\n        }];\r\n    }\r\n}"],
  "mappings": "AAEA;AAEA;AAEA;AAGA,MAAM,oBAAoB,OAAO,OAAO;AAAA,EACpC,OAAO;AAAA,EACP,QAAQ;AAAA;AAXZ,uCAeuC;AAAA,EASnC;AACI,UAAM,OAAO,OAAO,QAAQ;AATxB,iBAAiB;AAIjB,wBAAwB;AACxB,qBAAoB;AAMxB,SAAK,SAAS;AAEd,SAAK,WAAW,KAAK,OAAO,OAAO,IAAI,KAAK;AAAA,SACrC;AAAA,MACH,QAAS,KAAK;AAAA,MACd,QAAS,CAAC,CAAE,MAAO;AAAA,MACnB,OAAQ;AAAA,MACR,YAAa;AAAA,MACb,QAAS;AAAA,MACT,UAAW;AAAA,MACX,QAAS;AAAA;AAGb,SAAK,WAAW,KAAK,OAAO,OAAO,IAAI,KAAK;AAAA,SACrC;AAAA,MACH,QAAS,KAAK;AAAA,MACd,QAAS,CAAC,CAAE,MAAO;AAAA,MACnB,OAAQ,IAAI,KAAK;AAAA,MACjB,YAAa;AAAA,MACb,QAAS;AAAA,MACT,UAAW;AAAA,MACX,QAAS;AAAA;AAGb,SAAK,WAAW;AAAA;AAAA,EAIb;AAGH,SAAK,eAAe,KAAK,OAAO,IAAI,IAChC,gBACA,kBAAkB;AAAA;AAAA,EAInB;AAEH,QAAI,KAAK,YAAY,KAAK;AACtB,WAAK,aAAa;AAClB;AAAA;AAGA,WAAK,SAAS,WAAW;AAAA;AAG7B,SAAK,KAAK,KAAK,KAAK,KAAK;AAEzB,QAAI,KAAK,KAAK,IAAI;AACd,WAAK,KAAK,KAAK;AACf,WAAK,KAAK,KAAK;AAGf,UAAI,KAAK,KAAK,IAAI,SAAS,QACvB,KAAK,aAAa,oBAClB,KAAK,MACL,GACA,GACA,GACA,GACA,QACA,QAAQ;AAIR,aAAK;AAAA;AAAA;AAAA;AAAA,EAMV;AACH,QAAI,KAAK,aAAa,KAAK;AACvB,YAAM,KAAK;AAAA;AAAA;AAAA,EAKZ;AAEH,SAAK,WAAW;AAChB,SAAK,OAAO,KAAK;AACjB,SAAK,KAAK;AACV,SAAK,YAAY;AACjB,SAAK,SAAS,WAAW;AACzB,SAAK,SAAS,MAAM,KAAK;AAAA;AAAA,EAItB;AACH,SAAK;AAAA;AAAA,EAID;AAEJ,SAAK,WAAW;AAChB,SAAK,SAAS,WAAW;AACzB,SAAK,SAAS,MAAM,KAAK;AAAA;AAAA,EAItB;AAGH,WAAO,CAAC;AAAA,MACJ,MAAO,MAAM,QAAQ,MAAM;AAAA,MAC3B,KAAM,KAAK;AAAA,MACX,KAAM,KAAK,KAAK,OAAO,CAAE,GAAI,GAAG,GAAK;AAAA;AAAA;AAAA;",
  "names": []
}
