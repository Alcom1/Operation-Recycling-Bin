{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\bricktilebutton.ts"],
  "sourcesContent": ["import { Collision } from \"engine/gameobjects/gameobject\";\r\nimport { Collider } from \"engine/modules/collision\";\r\nimport { MASKS } from \"engine/utilities/math\";\r\nimport BrickTile, { BrickTileParams } from \"./bricktile\";\r\n\r\n/** Specifications of a button tile */\r\nconst brickButtonOverride = Object.freeze({\r\n    images : [\"brick_button_off\", \"brick_button_on\"],\r\n    width : 2\r\n});\r\n\r\n/** A tile with a button effect */\r\nexport default class BrickTileButton extends BrickTile {\r\n\r\n    plates: BrickTile[] = [];\r\n    private isLock : boolean = false;   // If this button is locked and can't be flipped again\r\n\r\n    /** Constructor */\r\n    constructor(params: BrickTileParams) {\r\n        super(Object.assign(params, brickButtonOverride));\r\n    }\r\n\r\n    /** Initialize this button, get all tiles with matching circuits */\r\n    public init() {\r\n\r\n        // Get plates affected by this button (also includes self?)\r\n        this.plates = (this.engine.tag.get(\r\n            \"BrickTile\", \r\n            \"Level\") as BrickTile[]).filter(p => p.circuit == this.circuit);\r\n    }\r\n\r\n    /** Get hazard and passive colliders of this brick. */\r\n    public getColliders() : Collider[] {\r\n\r\n        // Combine with passive collider from base class\r\n        return super.getColliders().concat([{\r\n            mask : MASKS.press,  // Button\r\n            min : this.gpos.getAdd({ x : 0,          y : -1}),\r\n            max : this.gpos.getAdd({ x : this.width, y :  0}) \r\n        }]);\r\n    }\r\n\r\n    /** Override collision check  */\r\n    protected resolveCollisions(collisions : Collision[]) {\r\n        super.resolveCollisions(collisions)\r\n\r\n        //Unlock this button if it isn't colliding with anything anymore.\r\n        if(collisions.length == 0) {\r\n\r\n            this.isLock = false;\r\n        }\r\n    }\r\n    \r\n    /** Flip on/off when pressed */\r\n    public resolveCollision(mask : number) {\r\n\r\n        // Turn off\r\n        if (mask & MASKS.press) {\r\n\r\n            if(!this.isLock) {\r\n\r\n                this.setOnOff(!this.isOn);                          // Store opposite of this button\r\n                this.plates.forEach(p => p.setOnOff(this.isOn));    // Set all other plates in this circuit\r\n                this.isLock = true;                                 // Lock the button to prevent repeat presses\r\n            }\r\n        }\r\n    }\r\n}"],
  "mappings": "AAEA;AACA;AAGA,MAAM,sBAAsB,OAAO,OAAO;AAAA,EACtC,QAAS,CAAC,oBAAoB;AAAA,EAC9B,OAAQ;AAAA;AARZ,6CAY6C;AAAA,EAMzC;AACI,UAAM,OAAO,OAAO,QAAQ;AALhC,kBAAsB;AACd,kBAAmB;AAAA;AAAA,EAQpB;AAGH,SAAK,SAAU,KAAK,OAAO,IAAI,IAC3B,aACA,SAAyB,OAAO,OAAK,EAAE,WAAW,KAAK;AAAA;AAAA,EAIxD;AAGH,WAAO,MAAM,eAAe,OAAO,CAAC;AAAA,MAChC,MAAO,MAAM;AAAA,MACb,KAAM,KAAK,KAAK,OAAO,CAAE,GAAI,GAAY,GAAI;AAAA,MAC7C,KAAM,KAAK,KAAK,OAAO,CAAE,GAAI,KAAK,OAAO,GAAK;AAAA;AAAA;AAAA,EAK5C;AACN,UAAM,kBAAkB;AAGxB,QAAG,WAAW,UAAU;AAEpB,WAAK,SAAS;AAAA;AAAA;AAAA,EAKf;AAGH,QAAI,OAAO,MAAM;AAEb,UAAG,CAAC,KAAK;AAEL,aAAK,SAAS,CAAC,KAAK;AACpB,aAAK,OAAO,QAAQ,OAAK,EAAE,SAAS,KAAK;AACzC,aAAK,SAAS;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
