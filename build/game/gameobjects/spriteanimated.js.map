{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\spriteanimated.ts"],
  "sourcesContent": ["import Engine from \"engine/engine\";\r\nimport GameObject from \"engine/gameobjects/gameobject\";\r\nimport { floor, getZIndex, GMULTY, OPPOSITE_DIRS } from \"engine/utilities/math\";\r\nimport Vect from \"engine/utilities/vect\";\r\nimport { CharacterImage, CharacterImageParams, CharacterParams } from \"./character\";\r\n\r\nexport interface SpriteAnimatedParams extends CharacterParams {\r\n    order : number;\r\n    width? : number;\r\n    offset : number;\r\n}\r\n\r\n/** Single image gameobject */\r\nexport default class SpriteAnimated extends GameObject {\r\n\r\n    //Set in constructor\r\n    private order : number;\r\n    private width? : number;\r\n    private offset : number;\r\n    private speed : number;\r\n    private images : CharacterImage[] = [];\r\n    private animFrames : number;\r\n    private animCount : number;\r\n\r\n    //Set in init\r\n    private animWidth : number = 0;\r\n    private animHeight : number = 0;\r\n\r\n    //Set here\r\n    private animTrack : number = 0;\r\n    private timer : number = 0;\r\n    private index: number = 1;\r\n\r\n    constructor(engine : Engine, params : SpriteAnimatedParams) {\r\n        super(engine, params);\r\n\r\n        this.order = params.order;\r\n        this.width = params.width;\r\n        this.offset = params.offset;\r\n        this.speed = params.speed ?? 1;\r\n\r\n        switch(params.images.length){\r\n\r\n            //No images (why?)\r\n            case 0:\r\n                break;\r\n\r\n            //Single images\r\n            case 1:\r\n                this.index = 0;\r\n                this.images[0] = this.getCharacterImage(params.images[0]);\r\n            \r\n            //Pair of images with opposing directions\r\n            case 2:\r\n                OPPOSITE_DIRS.forEach(d => {\r\n                    const index = Math.max(d, 0);\r\n                    if(params.images[index]) {\r\n                        this.images[d] = this.getCharacterImage(params.images[index]);\r\n                    }\r\n                });\r\n\r\n            //Many images\r\n            default:\r\n                params.images.forEach(i => this.images.push(this.getCharacterImage(i)));\r\n        }\r\n\r\n        this.animFrames = params.animFrames;\r\n        this.animCount = params.animCount;\r\n\r\n        this.setZIndex();\r\n    }\r\n\r\n    private getCharacterImage(params : CharacterImageParams) : CharacterImage {\r\n        return {\r\n            image : this.engine.library.getImage(\r\n                params.name, \r\n                params.extension),\r\n            offset : params.offset ?? 0\r\n        }\r\n    }\r\n\r\n    public init(ctx : CanvasRenderingContext2D) {\r\n\r\n        //Wait for init, images are guaranteed loaded by then\r\n        this.animWidth = this.images[this.index].image.width / this.animFrames;\r\n        this.animHeight = this.images[this.index].image.height;\r\n    }\r\n\r\n    public update(dt: number) {\r\n\r\n        //Increment timer by delta-time\r\n        this.timer += dt;\r\n    }\r\n\r\n    public updateSprite(gpos : Vect) {\r\n\r\n        this.timer = 0;\r\n        this.gpos = gpos;\r\n        this.animTrack = ++this.animTrack % this.animCount;\r\n        this.setZIndex();\r\n    }\r\n\r\n    private setZIndex() {\r\n        this.zIndex = getZIndex(\r\n            this.gpos,\r\n            300 - (this.order < 2 ? 0 : 295));\r\n    }\r\n\r\n    public setImageIndex(index : number) {\r\n        this.index = index;\r\n    }\r\n\r\n    public draw(ctx : CanvasRenderingContext2D) {\r\n\r\n        const width = this.width ?? 0;\r\n        const image = this.images[this.index];\r\n\r\n        ctx.drawImage(\r\n            //Greater image\r\n            image.image,                        //Use different sprites based on travelling direction\r\n\r\n            //Slice position & size \r\n            width * this.order +                //Move slice forward based on which segment this is.\r\n            image.offset +                      //Use different offsets based on travelling direction  \r\n            floor((                             //Move slice forward to the current animation and current frame\r\n                this.animTrack +                //Move slice forward to the current animation\r\n                Math.min(                       //Get current frame based on the timer and speed of the character\r\n                    this.timer *        \r\n                    this.speed,         \r\n                    1 - Number.EPSILON)) *      //Subtract epsilon to prevent grabbing the next frame at max value\r\n                this.animWidth *                \r\n                this.animFrames /               \r\n                this.animCount,                 \r\n                this.animWidth),                //Floor by frame-widths\r\n            0,  \r\n            width,  \r\n            this.animHeight,    \r\n\r\n            //Greater image position & size\r\n            width * this.order + this.offset,   //Move slice forward based on which segment this is and its offset\r\n            GMULTY - this.animHeight,\r\n            width,\r\n            this.animHeight);\r\n\r\n        // ctx.globalAlpha = 0.5;\r\n        // ctx.strokeStyle = \"#F00\"\r\n        // ctx.lineWidth = 4;\r\n        // ctx.strokeRect(\r\n        //     width * this.order + this.offset, \r\n        //     GMULTY, \r\n        //     width, \r\n        //    -this.animHeight);\r\n    }\r\n}"],
  "mappings": "AACA;AACA;AAFA,4CAa4C;AAAA,EAoBxC,YAAY;AACR,UAAM,SAAQ;AAdV,kBAA4B;AAK5B,qBAAqB;AACrB,sBAAsB;AAGtB,qBAAqB;AACrB,iBAAiB;AACjB,iBAAgB;AAKpB,SAAK,QAAQ,OAAO;AACpB,SAAK,QAAQ,OAAO;AACpB,SAAK,SAAS,OAAO;AACrB,SAAK,QAAQ,OAAO,SAAS;AAE7B,YAAO,OAAO,OAAO;AAAA,WAGZ;AACD;AAAA,WAGC;AACD,aAAK,QAAQ;AACb,aAAK,OAAO,KAAK,KAAK,kBAAkB,OAAO,OAAO;AAAA,WAGrD;AACD,sBAAc,QAAQ;AAClB,wBAAc,KAAK,IAAI,GAAG;AAC1B,cAAG,OAAO,OAAO;AACb,iBAAK,OAAO,KAAK,KAAK,kBAAkB,OAAO,OAAO;AAAA;AAAA;AAAA;AAM9D,eAAO,OAAO,QAAQ,OAAK,KAAK,OAAO,KAAK,KAAK,kBAAkB;AAAA;AAG3E,SAAK,aAAa,OAAO;AACzB,SAAK,YAAY,OAAO;AAExB,SAAK;AAAA;AAAA,EAGD;AACJ,WAAO;AAAA,MACH,OAAQ,KAAK,OAAO,QAAQ,SACxB,OAAO,MACP,OAAO;AAAA,MACX,QAAS,OAAO,UAAU;AAAA;AAAA;AAAA,EAI3B;AAGH,SAAK,YAAY,KAAK,OAAO,KAAK,OAAO,MAAM,QAAQ,KAAK;AAC5D,SAAK,aAAa,KAAK,OAAO,KAAK,OAAO,MAAM;AAAA;AAAA,EAG7C;AAGH,SAAK,SAAS;AAAA;AAAA,EAGX;AAEH,SAAK,QAAQ;AACb,SAAK,OAAO;AACZ,SAAK,YAAY,EAAE,KAAK,YAAY,KAAK;AACzC,SAAK;AAAA;AAAA,EAGD;AACJ,SAAK,SAAS,UACV,KAAK,MACL,MAAO,MAAK,QAAQ,IAAI,IAAI;AAAA;AAAA,EAG7B;AACH,SAAK,QAAQ;AAAA;AAAA,EAGV;AAEH,kBAAc,KAAK,SAAS;AAC5B,kBAAc,KAAK,OAAO,KAAK;AAE/B,QAAI,UAEA,MAAM,OAGN,QAAQ,KAAK,QACb,MAAM,SACN,MACI,MAAK,YACL,KAAK,IACD,KAAK,QACL,KAAK,OACL,IAAI,OAAO,YACf,KAAK,YACL,KAAK,aACL,KAAK,WACL,KAAK,YACT,GACA,OACA,KAAK,YAGL,QAAQ,KAAK,QAAQ,KAAK,QAC1B,SAAS,KAAK,YACd,OACA,KAAK;AAAA;AAAA;",
  "names": []
}
