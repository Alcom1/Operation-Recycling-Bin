{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\stud.ts"],
  "sourcesContent": ["import GameObject, { GameObjectParams } from \"engine/gameobjects/gameobject\";\r\nimport { colorTranslate, GMULTX, GMULTY, MOBILE_PREVIEW_MAX, Z_DEPTH } from \"engine/utilities/math\";\r\nimport Vect, { Point } from \"engine/utilities/vect\";\r\n\r\n/** Stud parameters */\r\ninterface StudParams extends GameObjectParams {\r\n    color?: string;\r\n}\r\n\r\n/** Pair of studs for a brick */\r\nexport default class Stud extends GameObject {\r\n\r\n    private color: string;                              // Stud color\r\n    private image : HTMLImageElement;                   // Image of a pair of studs\r\n    private isPressed : boolean = false;                // Brick is pressed\r\n    private isSelected : boolean = false;               // Brick is selected\r\n    private isSnapped : boolean = false;                // Brick is snapped\r\n    public isVisible : boolean = true;                  // Stud is visible and should be drawn\r\n    public mobilePreviewSize : Vect = new Vect(0, 0);   // Size for mobile preview\r\n    private isMobileFlipped : boolean = false;          // flipped state for mobile preview\r\n\r\n    /** z-index get/setters */\r\n    public get zIndex() : number { return super.zIndex; }\r\n    public set zIndex(value : number) { \r\n        super.zIndex = value + (this.isSelected && !this.isSnapped ? 2000 : 0);\r\n    }\r\n    public get zpos() : Vect { \r\n        return (\r\n            this.isSelected ?\r\n            this.gpos.getAdd({\r\n                x : Math.floor(this.spos.x / GMULTX),\r\n                y : Math.floor(this.spos.y / GMULTY),\r\n            }) :\r\n            super.zpos); \r\n    }\r\n    public get zState() : Boolean { return super.zState && this.isVisible }\r\n    public get zSize() : Point { return { x : 1, y : 0}; }\r\n    public get zLayer() : Number { return this.isSelected && !this.isSnapped ? 1 : 0 }\r\n\r\n    /** Constructor */\r\n    constructor(params: StudParams) {\r\n        super(params);\r\n\r\n        this.tags = [\"Stud\"];\r\n\r\n        this.color = colorTranslate(params.color);\r\n\r\n        this.image = this.engine.library.getImage(`stud_${this.color.replace(\"#\", \"\").toLowerCase()}`);\r\n    }\r\n\r\n    /** Draw studs */\r\n    public draw(ctx: CanvasRenderingContext2D): void {\r\n\r\n        if (this.isVisible) {\r\n            \r\n            // Global transparency for selection states\r\n            ctx.globalAlpha =\r\n                this.isSnapped ? 0.75:  // Snapped studs are transparent\r\n                this.isSelected ? 0.5:  // Selected studs are more transparent\r\n                this.isPressed ? 0.75:  // Pressed studs are less transparent again\r\n                1.0;                    // Otherwise opaque if not selected or pressed\r\n            \r\n            // Draw the stored image for this stud\r\n            ctx.drawImage(this.image, Z_DEPTH - 13, 0);\r\n        }\r\n    }    \r\n\r\n    /** Draw mobile preview */\r\n    public superDraw(ctx: CanvasRenderingContext2D): void {\r\n\r\n        if (this.engine.mouse.getMouseType() == \"mouse\" ||\r\n           !this.isSelected || \r\n           !MOBILE_PREVIEW_MAX.getLessOrEqual(this.mobilePreviewSize)) {\r\n            return;\r\n        }\r\n\r\n        ctx.drawImage(\r\n            this.image, \r\n            Z_DEPTH - 13.5, \r\n            - GMULTY * (\r\n                this.isMobileFlipped ? \r\n               -this.mobilePreviewSize.y - 3.2 :\r\n                this.mobilePreviewSize.y + 3.5 ));\r\n    }\r\n\r\n    /** Set this stud's snap state */\r\n    public snap(state: boolean): void {\r\n        \r\n        this.isSnapped = state;\r\n    }\r\n\r\n    /** Setup this stud for pressing */\r\n    public press(): void {\r\n        this.isPressed = true;\r\n    }\r\n\r\n    /** Setup this stud for selecting */\r\n    public select(): void {\r\n        this.isSelected = true;\r\n    }\r\n\r\n    /** Reset this stud's z-index */\r\n    public deselect(): void {\r\n        this.isPressed = false;\r\n        this.isSelected = false;\r\n        this.isSnapped = false;\r\n    }\r\n\r\n    /** Set the flipped state for the mobile preview */\r\n    public flipMobile(isFlipped : boolean) {\r\n        \r\n        this.isMobileFlipped = isFlipped;\r\n    }\r\n}"],
  "mappings": "AAAA;AACA;AACA;AAFA,kCAUkC;AAAA,EA8B9B,YAAY;AACR,UAAM;AA3BF,qBAAsB;AACtB,sBAAuB;AACvB,qBAAsB;AACvB,qBAAsB;AACtB,6BAA2B,IAAI,KAAK,GAAG;AACtC,2BAA4B;AAwBhC,SAAK,OAAO,CAAC;AAEb,SAAK,QAAQ,eAAe,OAAO;AAEnC,SAAK,QAAQ,KAAK,OAAO,QAAQ,SAAS,QAAQ,KAAK,MAAM,QAAQ,KAAK,IAAI;AAAA;AAAA,MAzBvE;AAAoB,WAAO,MAAM;AAAA;AAAA,MACjC;AACP,UAAM,SAAS,QAAS,MAAK,cAAc,CAAC,KAAK,YAAY,MAAO;AAAA;AAAA,MAE7D;AACP,WACI,KAAK,aACL,KAAK,KAAK,OAAO;AAAA,MACb,GAAI,KAAK,MAAM,KAAK,KAAK,IAAI;AAAA,MAC7B,GAAI,KAAK,MAAM,KAAK,KAAK,IAAI;AAAA,SAEjC,MAAM;AAAA;AAAA,MAEH;AAAqB,WAAO,MAAM,UAAU,KAAK;AAAA;AAAA,MACjD;AAAkB,WAAO,CAAE,GAAI,GAAG,GAAI;AAAA;AAAA,MACtC;AAAoB,WAAO,KAAK,cAAc,CAAC,KAAK,YAAY,IAAI;AAAA;AAAA,EAcxE;AAEH,QAAI,KAAK;AAGL,UAAI,cACA,KAAK,YAAY,OACjB,KAAK,aAAa,MAClB,KAAK,YAAY,OACjB;AAGJ,UAAI,UAAU,KAAK,OAAO,UAAU,IAAI;AAAA;AAAA;AAAA,EAKzC;AAEH,QAAI,KAAK,OAAO,MAAM,kBAAkB,WACrC,CAAC,KAAK,cACN,CAAC,mBAAmB,eAAe,KAAK;AACvC;AAAA;AAGJ,QAAI,UACA,KAAK,OACL,UAAU,MACV,CAAE,SACE,MAAK,kBACN,CAAC,KAAK,kBAAkB,IAAI,MAC3B,KAAK,kBAAkB,IAAI;AAAA;AAAA,EAIhC;AAEH,SAAK,YAAY;AAAA;AAAA,EAId;AACH,SAAK,YAAY;AAAA;AAAA,EAId;AACH,SAAK,aAAa;AAAA;AAAA,EAIf;AACH,SAAK,YAAY;AACjB,SAAK,aAAa;AAClB,SAAK,YAAY;AAAA;AAAA,EAId;AAEH,SAAK,kBAAkB;AAAA;AAAA;",
  "names": []
}
