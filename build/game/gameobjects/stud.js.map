{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\stud.ts"],
  "sourcesContent": ["import Engine from \"engine/engine\";\r\nimport GameObject, { GameObjectParams } from \"engine/gameobjects/gameobject\";\r\nimport { colorTranslate, getZIndex, GMULTX, GMULTY, MOBILE_PREVIEW_MAX, UNDER_CURSOR_Z_INDEX, Z_DEPTH } from \"engine/utilities/math\";\r\nimport Vect from \"engine/utilities/vect\";\r\n\r\ninterface StudParams extends GameObjectParams {\r\n    color?: string;\r\n}\r\n\r\n/** Series of studs for a brick */\r\nexport default class Stud extends GameObject {\r\n    color: string;\r\n\r\n    image : HTMLImageElement;\r\n\r\n    private isPressed : boolean = false;\r\n    private isSelected : boolean = false;\r\n    private isSnapped : boolean = false;\r\n    public isVisible : boolean = true;\r\n    public mobilePreviewSize : Vect = new Vect(0, 0);\r\n    private isMobileFlipped : boolean = false;\r\n\r\n    constructor(engine: Engine, params: StudParams) {\r\n        super(engine, params);\r\n\r\n        this.color = colorTranslate(params.color);\r\n\r\n        this.image = this.engine.library.getImage(`stud_${this.color.replace(\"#\", \"\").toLowerCase()}`);\r\n    }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D): void {\r\n\r\n        if(this.isVisible) {\r\n            \r\n            // Global transparency for selection states\r\n            ctx.globalAlpha =\r\n                this.isSnapped ? 0.75:  // Snapped studs are transparent\r\n                this.isSelected ? 0.5:  // Selected studs are more transparent\r\n                this.isPressed ? 0.75:  // Pressed studs are less transparent again\r\n                1.0;                    // Otherwise opaque if not selected or pressed\r\n            \r\n            // Draw the stored image for this stud\r\n            ctx.drawImage(this.image, Z_DEPTH - 13, 0);\r\n        }\r\n    }    \r\n    \r\n    public superDraw(ctx: CanvasRenderingContext2D): void {\r\n\r\n        if (this.engine.mouse.getMouseType() == \"mouse\" ||\r\n           !this.isSelected || \r\n           !MOBILE_PREVIEW_MAX.getLessOrEqual(this.mobilePreviewSize)) {\r\n            return;\r\n        }\r\n\r\n        ctx.drawImage(\r\n            this.image, \r\n            Z_DEPTH - 13.5, \r\n            - GMULTY * (\r\n                this.isMobileFlipped ? \r\n                -this.mobilePreviewSize.y - 3.2 :\r\n                this.mobilePreviewSize.y + 3.5 ));\r\n    }\r\n\r\n    /** Get z-index for draw sorting */\r\n    public getGOZIndex() : number {\r\n\r\n        // Set z-index to draw this brick in its snapped position\r\n        if(this.isSnapped) {\r\n            return getZIndex(\r\n                this.gpos.getAdd({\r\n                    x : Math.round(this.spos.x / GMULTX),\r\n                    y : Math.round(this.spos.y / GMULTY)\r\n                }),\r\n                1);\r\n        }        \r\n        // Set z-index to draw this brick under the cursor\r\n        if(this.isSelected) {\r\n            return UNDER_CURSOR_Z_INDEX;\r\n        }\r\n        //Normal z-index\r\n        else {\r\n            return getZIndex(this.gpos, 1);\r\n        }\r\n    }\r\n\r\n    /** Set this stud's snap state */\r\n    public snap(state: boolean): void {\r\n        if (state) {\r\n            this.isSnapped = true;\r\n        }\r\n        else {\r\n            this.isSnapped = false;\r\n        }\r\n    }\r\n\r\n    /** Setup this stud for pressing */\r\n    public press(): void {\r\n        this.isPressed = true;\r\n    }\r\n\r\n    /** Setup this stud for selecting */ \r\n    public select(): void {\r\n        this.isSelected = true;\r\n    }\r\n\r\n    /** Reset this stud's z-index */\r\n    public deselect(): void {\r\n        this.isPressed = false;\r\n        this.isSelected = false;\r\n        this.isSnapped = false;\r\n    }\r\n\r\n    /** Set the flipped state for the mobile preview */\r\n    public flipMobile(isFlipped : boolean) {\r\n        \r\n        this.isMobileFlipped = isFlipped;\r\n    }\r\n}"],
  "mappings": "AACA;AACA;AACA;AAHA,kCAUkC;AAAA,EAY9B,YAAY;AACR,UAAM,SAAQ;AARV,qBAAsB;AACtB,sBAAuB;AACvB,qBAAsB;AACvB,qBAAsB;AACtB,6BAA2B,IAAI,KAAK,GAAG;AACtC,2BAA4B;AAKhC,SAAK,QAAQ,eAAe,OAAO;AAEnC,SAAK,QAAQ,KAAK,OAAO,QAAQ,SAAS,QAAQ,KAAK,MAAM,QAAQ,KAAK,IAAI;AAAA;AAAA,EAG3E;AAEH,QAAG,KAAK;AAGJ,UAAI,cACA,KAAK,YAAY,OACjB,KAAK,aAAa,MAClB,KAAK,YAAY,OACjB;AAGJ,UAAI,UAAU,KAAK,OAAO,UAAU,IAAI;AAAA;AAAA;AAAA,EAIzC;AAEH,QAAI,KAAK,OAAO,MAAM,kBAAkB,WACrC,CAAC,KAAK,cACN,CAAC,mBAAmB,eAAe,KAAK;AACvC;AAAA;AAGJ,QAAI,UACA,KAAK,OACL,UAAU,MACV,CAAE,SACE,MAAK,kBACL,CAAC,KAAK,kBAAkB,IAAI,MAC5B,KAAK,kBAAkB,IAAI;AAAA;AAAA,EAIhC;AAGH,QAAG,KAAK;AACJ,aAAO,UACH,KAAK,KAAK,OAAO;AAAA,QACb,GAAI,KAAK,MAAM,KAAK,KAAK,IAAI;AAAA,QAC7B,GAAI,KAAK,MAAM,KAAK,KAAK,IAAI;AAAA,UAEjC;AAAA;AAGR,QAAG,KAAK;AACJ,aAAO;AAAA;AAIP,aAAO,UAAU,KAAK,MAAM;AAAA;AAAA;AAAA,EAK7B;AACH,QAAI;AACA,WAAK,YAAY;AAAA;AAGjB,WAAK,YAAY;AAAA;AAAA;AAAA,EAKlB;AACH,SAAK,YAAY;AAAA;AAAA,EAId;AACH,SAAK,aAAa;AAAA;AAAA,EAIf;AACH,SAAK,YAAY;AACjB,SAAK,aAAa;AAClB,SAAK,YAAY;AAAA;AAAA,EAId;AAEH,SAAK,kBAAkB;AAAA;AAAA;",
  "names": []
}
