{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\button.ts"],
  "sourcesContent": ["import GameObject, { GameObjectParams } from \"engine/gameobjects/gameobject\";\r\nimport { MouseState } from \"engine/modules/mouse\";\r\nimport { colorAdd, colorMult, colorTranslate, colPointRect, Z_DEPTH, WIDTH_SIDEPANEL } from \"engine/utilities/math\";\r\nimport Vect, { Point } from \"engine/utilities/vect\";\r\n\r\ninterface ButtonParams extends GameObjectParams {\r\n    size?: Point;\r\n    depth?: number;\r\n    color?: string;\r\n    backgroundColor?: string;\r\n    hoverColor?: string;\r\n    font?: string;\r\n    text?: string;\r\n    isCenterUI?: boolean;\r\n}\r\n\r\nexport default class Button extends GameObject {\r\n\r\n    \r\n    /** If button is pressed */\r\n    private press = false;\r\n    /** If button is hovered over */\r\n    private hover = false;\r\n    \r\n    /** Button size */\r\n    private size: Vect;\r\n    /** Button z-axis depth */\r\n    private depth: number;\r\n\r\n    /** Button default color */\r\n    private bgColor: string;\r\n    /** Button default shaded color */\r\n    private bgColorDark: string;\r\n    /** Button default light color */\r\n    private bgColorBright: string;\r\n\r\n    /** Button hover color */\r\n    private bhColor: string;\r\n    /** Button hover shaded color */\r\n    private bhColorDark: string;\r\n    /** Button hover light color */\r\n    private bhColorBright: string;\r\n\r\n    /** Button font */\r\n    private font: string;\r\n    /** Button color */\r\n    private color: string;\r\n    /** Button text */\r\n    protected text: string;\r\n\r\n    /* If this button is horizontally centered around the UI */\r\n    private isCenterUI: boolean;\r\n    private images = new Map<boolean, Map<boolean, HTMLImageElement>>([[false, new Map()], [true, new Map()]]);\r\n\r\n    /** Constructor */\r\n    constructor(params: ButtonParams) {\r\n        super(params);\r\n        \r\n        // Set default color\r\n        this.bgColor = colorTranslate(params.backgroundColor ?? \"#DDDDDD\");\r\n        this.bgColorDark = colorMult(this.bgColor, 0.75);\r\n        this.bgColorBright = colorAdd(this.bgColor, 48);\r\n\r\n        // Set hover color\r\n        this.bhColor = colorTranslate(params.hoverColor || \"#DDDD00\");\r\n        this.bhColorDark = colorMult(this.bhColor, 0.75);\r\n        this.bhColorBright = colorAdd(this.bhColor, 48);\r\n\r\n        // Set size & depth\r\n        this.size = new Vect(params.size?.x ?? 0, params.size?.y ?? 0);\r\n        this.depth = params.depth || Z_DEPTH / 4;\r\n\r\n        // Set style\r\n        this.font = params.font ?? \"16px Font04b_08\";\r\n        this.color = params.color ?? \"#333333\";\r\n        this.text = params.text ?? \"\";\r\n\r\n        // Set special position\r\n        this.isCenterUI = !!params.isCenterUI;\r\n\r\n        // Bake buttons\r\n        // Bake press & unpress\r\n        for (const press of [false, true]) {\r\n\r\n            // Back hover & not-hover\r\n            for (const hover of [false, true]) {\r\n\r\n                const img = new Image();\r\n\r\n                img.src = this.engine.baker.bake(\r\n                    ctx => this.drawButton(ctx, press, hover),\r\n                    this.size.x + this.depth,   \r\n                    this.size.y + this.depth,   \r\n                    `BUTTON.${this.text}.${press ? \"PRESS\" : \"UNPRS\"}.${hover ? \"HOVER\" : \"OUTSD\"}`            \r\n                );\r\n\r\n                this.images.get(press)?.set(hover, img);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Initialize this button */\r\n    public init(ctx: CanvasRenderingContext2D) {\r\n        \r\n        // Center button horizontally around the sidepanel UI\r\n        if (this.isCenterUI) {\r\n            this.spos.x = ctx.canvas.width - WIDTH_SIDEPANEL / 2;\r\n        }\r\n    }\r\n\r\n    /** Update this button to match current cursor position & state */\r\n    public update(dt: number): void {\r\n\r\n        var pos = this.engine.mouse.getPos();   // Get mouse position\r\n        \r\n        // Set hover if the cursor is inside the button area\r\n        this.hover = colPointRect(\r\n            pos.x,                              // Cursor x-pos\r\n            pos.y,                              // Cursor y-pos\r\n            this.spos.x - this.size.x / 2,      // Button x-corner\r\n            this.spos.y - this.size.y / 2,      // Button y-corner\r\n            this.size.x + this.depth,           // Button width with depth compensation\r\n            this.size.y + this.depth            // Button height with depth compensation\r\n        );\r\n        \r\n        // If mouse cursor is hovering over this button\r\n        if (this.hover) {\r\n\r\n            // Mouse states\r\n            // Get mouse state for different cursor-button events\r\n            switch(this.engine.mouse.getMouseState()) {\r\n\r\n                case MouseState.ISRELEASED:\r\n                    this.press = false;         // NONE state\r\n                    break;\r\n\r\n                case MouseState.WASPRESSED:\r\n                    this.press = true;          // PRESS state\r\n                    break;\r\n\r\n                case MouseState.WASRELEASED :\r\n                    if (this.press) {\r\n                        this.doButtonAction();  // Do the button's action\r\n                        this.press = false;     // Return to NONE state\r\n                    }\r\n                    break;\r\n            }\r\n\r\n        } \r\n        // If mouse cursor outside this button\r\n        else {\r\n\r\n            // Go from pressed state to none state if cursor is released outside the button\r\n            if (this.press && this.engine.mouse.getMouseState() == MouseState.ISRELEASED) {\r\n\r\n                this.press = false;             // NONE state\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Draw the current image for this button */\r\n    public draw(ctx: CanvasRenderingContext2D): void {\r\n\r\n        ctx.drawImage(\r\n            this.images.get(this.press)?.get(this.hover)!,\r\n            -this.size.x / 2, \r\n            -this.size.y / 2\r\n        );\r\n    }\r\n\r\n    /** Default button action */\r\n    protected doButtonAction(): void {\r\n\r\n        console.log(this.text);\r\n    }\r\n\r\n    /* Button draw */\r\n    private drawButton(ctx: CanvasRenderingContext2D, press: boolean, hover: boolean): void {\r\n\r\n        // Handle button depth\r\n        var currentDepth = press ? this.depth / 2 : this.depth;             // Depth for pressed or unpressed state\r\n        ctx.translate(this.depth - currentDepth, currentDepth);             // Translate by depth\r\n\r\n        // Button top face color\r\n        ctx.fillStyle = hover ? this.bhColorBright : this.bgColorBright;\r\n\r\n        // Draw button top face\r\n        ctx.beginPath();\r\n        ctx.moveTo(0,                          0);                          // Lower Right\r\n        ctx.lineTo(              currentDepth, -currentDepth);              // Upper Right\r\n        ctx.lineTo(this.size.x + currentDepth, -currentDepth);              // Upper Left\r\n        ctx.lineTo(this.size.x,                0);                          // Lower Left\r\n        ctx.fill();\r\n\r\n        // Button right face color\r\n        ctx.fillStyle = hover ? this.bhColorDark : this.bgColorDark;\r\n\r\n        // Draw button right face\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.size.x,                0);                          // Upper Left\r\n        ctx.lineTo(this.size.x + currentDepth,             - currentDepth); // Upper Right\r\n        ctx.lineTo(this.size.x + currentDepth, this.size.y - currentDepth); // Lower Left\r\n        ctx.lineTo(this.size.x,                this.size.y);                // Lower Right\r\n        ctx.fill();\r\n\r\n        // Button rectangle color\r\n        ctx.fillStyle = hover ? this.bhColor : this.bgColor;\r\n\r\n        // Draw button rectangle \r\n        ctx.fillRect(   \r\n            0,                          // Center vertical\r\n            0,                          // Center horizontal\r\n            this.size.x,                // Button width\r\n            this.size.y                 // Button height\r\n        );\r\n\r\n        // Draw button text\r\n        ctx.textBaseline = \"middle\";    // Center vertical\r\n        ctx.textAlign = \"center\";       // Center horizontal\r\n        ctx.font = this.font;           // Font\r\n        ctx.fillStyle = this.color;     // Color\r\n        ctx.fillText(\r\n            this.text,                  // Fill button text\r\n            this.size.x / 2, \r\n            this.size.y / 2\r\n        );\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
