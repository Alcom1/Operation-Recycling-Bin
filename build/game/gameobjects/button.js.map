{
  "version": 3,
  "sources": ["/home/jonathan/Development/lego/Operation-Recycling-Bin/src/game/gameobjects/button.ts"],
  "sourcesContent": ["import Engine from \"engine/engine\";\nimport GameObject, { GameObjectParams } from \"engine/gameobjects/gameobject\";\nimport Scene from \"engine/scene/scene\";\nimport {MouseState} from \"engine/modules/mouse\";\nimport { BOUNDARY, colorAdd, colorMult, colorTranslate, colPointRect, GMULTX, LINE_WIDTH, Z_DEPTH } from \"engine/utilities/math\";\nimport Vect, { Point } from \"engine/utilities/vect\";\n\ninterface ButtonParams extends GameObjectParams {\n    size?: Point;\n    depth?: number;\n    color?: string;\n    backgroundColor?: string;\n    hoverColor?: string;\n    font?: string;\n    text?: string;\n    isCenterUI?: boolean;\n}\n\nexport default class Button extends GameObject {\n    private press = false;\n    private hover = false;\n    \n    private size: Vect;\n    private depth: number;\n\n    private bgColor: string;\n    private bgColorDark: string;\n    private bgColorBright: string;\n    /** Button hover color */\n    private bhColor: string;\n    /** Button hover shaded color */\n    private bhColorDark: string;\n    /** Button hover light color */\n    private bhColorBright: string;\n\n    private font: string;\n    private color: string;\n    protected text: string;\n\n    /* If this button is horizontally centered around the UI */\n    private isCenterUI: boolean;\n\n    private images = new Map<boolean, Map<boolean, HTMLImageElement>>([[false, new Map()], [true, new Map()]]);\n\n    constructor(engine: Engine, params: ButtonParams) {\n        super(engine, params);\n        \n        this.bgColor = colorTranslate(params.backgroundColor ?? \"#DDDDDD\");\n        this.bgColorDark = colorMult(this.bgColor, 0.75);\n        this.bgColorBright = colorAdd(this.bgColor, 48);\n\n        this.bhColor = colorTranslate(params.hoverColor || \"#DDDD00\");\n        this.bhColorDark = colorMult(this.bhColor, 0.75);\n        this.bhColorBright = colorAdd(this.bhColor, 48);\n\n        this.size = new Vect(params.size?.x ?? 0, params.size?.y ?? 0);\n        this.depth = params.depth || Z_DEPTH / 4;\n\n        this.font = params.font ?? \"bold 18pt Consolas\";\n        this.color = params.color ?? \"#333333\";\n        this.text = params.text ?? \"\";\n\n        this.isCenterUI = !!params.isCenterUI;\n\n        // Bake buttons\n        for (const press of [false, true]) {\n            for (const hover of [false, true]) {\n                const img = new Image();\n                img.src = this.engine.baker.bake(\n                    ctx => this.drawButton(ctx, press, hover),\n                    this.size.x + this.depth,   \n                    this.size.y + this.depth,   \n                    `BUTTON.${this.text}.${press ? \"PRESS\" : \"UNPRS\"}.${hover ? \"HOVER\" : \"OUTSD\"}`            \n                );\n                this.images.get(press)?.set(hover, img);\n            }\n        }\n    }\n\n    public init(ctx: CanvasRenderingContext2D, scenes: Scene[]): void {\n        // Center button horizontally around the UI\n        if (this.isCenterUI) {\n            this.spos.x =\n                ctx.canvas.width / 2 +\n                BOUNDARY.maxx * GMULTX / 2 +\n                LINE_WIDTH / 2 +\n                this.depth / 2;\n        }\n    }\n\n    public update(dt: number): void {\n        var pos = this.engine.mouse.getPos();\n        \n        // Set hover if the cursor is inside the button area\n        this.hover = colPointRect(\n            pos.x,                              // Cursor x-pos\n            pos.y,                              // Cursor y-pos\n            this.spos.x - this.size.x / 2,      // Button x-corner\n            this.spos.y - this.size.y / 2,      // Button y-corner\n            this.size.x + this.depth,           // Button width with depth compensation\n            this.size.y + this.depth            // Button height with depth compensation\n        );\n        \n        if (this.hover) {\n            // Mouse states\n            switch(this.engine.mouse.getMouseState()) {          // Get mouse state for different cursor-buttone events\n                case MouseState.ISRELEASED:\n                    this.press = false;                     // NONE state\n                    break;\n                case MouseState.WASPRESSED:\n                    this.press = true;                      // PRESS state\n                    break;\n                case MouseState.WASRELEASED :\n                    if (this.press) {\n                        this.doButtonAction();              // Do the button's action\n                        this.press = false;                 // Return to NONE state\n                    }\n                    break;\n            }\n        } else {\n            // Go from pressed state to none state if cursor is released outside the button\n            if (this.press && this.engine.mouse.getMouseState() == MouseState.ISRELEASED) {\n                this.press = false;                         // NONE state\n            }\n        }\n    }\n\n    public draw(ctx: CanvasRenderingContext2D): void {\n        ctx.drawImage(\n            this.images.get(this.press)?.get(this.hover)!,\n            -this.size.x / 2, \n            -this.size.y / 2\n        );\n    }\n\n    protected doButtonAction(): void {\n        console.log(this.text);\n    }\n\n    /* Button draw */\n    private drawButton(ctx: CanvasRenderingContext2D, press: boolean, hover: boolean): void {\n        // Handle button depth\n        var currentDepth = press ? this.depth / 2 : this.depth;        // Depth for pressed or unpressed state\n        ctx.translate(this.depth - currentDepth, currentDepth);             // Translate by depth\n\n        // Button top face color\n        ctx.fillStyle = hover ? this.bhColorBright : this.bgColorBright;\n\n        // Draw button top face\n        ctx.beginPath();\n        ctx.moveTo(0,                          0);                          // Lower Right\n        ctx.lineTo(              currentDepth, -currentDepth);              // Upper Right\n        ctx.lineTo(this.size.x + currentDepth, -currentDepth);              // Upper Left\n        ctx.lineTo(this.size.x,                0);                          // Lower Left\n        ctx.fill();\n\n        // Button right face color\n        ctx.fillStyle = hover ? this.bhColorDark : this.bgColorDark;\n\n        // Draw button right face\n        ctx.beginPath();\n        ctx.moveTo(this.size.x,                0);                          // Upper Left\n        ctx.lineTo(this.size.x + currentDepth,             - currentDepth); // Upper Right\n        ctx.lineTo(this.size.x + currentDepth, this.size.y - currentDepth); // Lower Left\n        ctx.lineTo(this.size.x,                this.size.y);                // Lower Right\n        ctx.fill();\n\n        // Button rectangle color\n        ctx.fillStyle = hover ? this.bhColor : this.bgColor;\n\n        // Draw button rectangle \n        ctx.fillRect(   \n            0,                          // Center vertical\n            0,                          // Center horizontal\n            this.size.x,                // Button width\n            this.size.y                 // Button height\n        );\n\n        // Draw button text\n        ctx.textBaseline = \"middle\";    // Center vertical\n        ctx.textAlign = \"center\";       // Center horizontal\n        ctx.font = this.font;           // Font\n        ctx.fillStyle = this.color;     // Color\n        ctx.fillText(\n            this.text,                  // Fill button text\n            this.size.x / 2 + 1, \n            this.size.y / 2 + 1\n        );\n    }\n}"],
  "mappings": "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",
  "names": []
}
