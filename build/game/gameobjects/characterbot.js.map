{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\characterbot.ts"],
  "sourcesContent": ["import Engine from \"engine/engine\";\r\nimport Character, { CharacterParams } from \"./character\";\r\nimport { BOUNDARY, bitStack, GMULTY, GMULTX} from \"engine/utilities/math\";\r\nimport Animat, { AnimationParams } from \"./animation\";\r\nimport { Collider } from \"engine/modules/collision\";\r\nimport Vect, { Point } from \"engine/utilities/vect\";\r\n\r\ninterface CharacterBotParams extends CharacterParams {\r\n    animsMisc : AnimationInputParams[];\r\n}\r\n\r\ninterface AnimationInputParams extends AnimationParams {\r\n    isSliced? : boolean;\r\n}\r\n\r\nenum ArmorState {\r\n    NONE,\r\n    ACTIVE,\r\n    FLASH\r\n}\r\n\r\nenum FlightState {\r\n    NONE,\r\n    JUMP,\r\n    UPWARD\r\n}\r\n\r\n//Bot parameters\r\nconst characterBotOverride = Object.freeze({\r\n    //Main parameters\r\n    height: 4,      //Bot is this tall\r\n    speed : 2.5,    //Bot moves fast\r\n    images : [      //Bot has left & right animations\r\n        { name : \"char_bot_left\", offsetX : 36 },\r\n        { name : \"char_bot_right\", offsetX : 14},\r\n        { name : \"char_bot_left_armor\", offsetX : 36 },\r\n        { name : \"char_bot_right_armor\", offsetX : 14}],\r\n    frameCount : 10,\r\n    animsCount : 2,\r\n\r\n    //Misc animation parameters\r\n    animsMisc : [{ //Bot-bin interaction animation\r\n        images : [{ name : \"char_bot_bin\" }],\r\n        gposOffset : { x : -1, y : 0},\r\n        zModifier : 150,\r\n        frameCount : 12\r\n    },{             //Bot explosion animation\r\n        images : [{ name : \"char_bot_explosion\" }],\r\n        gposOffset : { x : -3, y : 0},\r\n        zModifier : 600,\r\n        frameCount : 16,\r\n        isLoop : false\r\n    },{             //Bot up animation\r\n        images : [  //Flying has left & right animations\r\n            { name : \"char_bot_fly_left\", offsetX : 36 },\r\n            { name : \"char_bot_fly_right\", offsetX : 14 }],\r\n        speed : 2.5,    //Bot moves fast\r\n        gposOffset : { x : -1, y : 0},\r\n        frameCount : 10,\r\n        animsCount : 2,\r\n        isSliced : true\r\n    },{             //Bot armor animation\r\n        images : [  //Flying has left & right animations\r\n            { name : \"char_bot_armor_left\", offsetX : 36 },\r\n            { name : \"char_bot_armor_right\", offsetX : 14 }],\r\n        gposOffset : { x : -1, y : 0},\r\n        frameCount : 12,\r\n        isSliced : true\r\n    }]\r\n});\r\n\r\n//Collision bitmasks for bot-brick collisions\r\nconst cbc = Object.freeze({\r\n    flor : bitStack([0, 7]),\r\n    down : bitStack([1, 8]),\r\n    ceil : bitStack([2, 9]),\r\n    head : bitStack([3]),\r\n    wall : bitStack([4, 5]),\r\n    step : bitStack([6])\r\n});\r\n\r\nexport default class CharacterBot extends Character {\r\n\r\n    private timerSpc : number = 0;                          //Timer to track duration of special movements\r\n    private timerArm : number = 0;                          //Timer to track armor flash\r\n    private ceilSubOffset = -6;                             //Offset for up/down movement\r\n    private vertSpeedMax = 500;                             //Maximum air speed\r\n    private vertSpeed = 500;                                //Speed of air movement\r\n    private vertAccel = -1200;                              //Gravity hurts\r\n    private horzSpeed = 175;                                //Horizontal air speed\r\n    private flightState : FlightState = FlightState.NONE;   //If currently flying\r\n    private armorDelay : number = 2;                        //Delay where armor remains after taking damage\r\n    private armorFlashRate : number = 8;                    //Rate of the armor flashing effect\r\n    private armorState : ArmorState = ArmorState.NONE;      //Current state of the armor\r\n\r\n    protected get animImageIndex() : number { \r\n        return this.move.x * (\r\n            this.armorState == ArmorState.ACTIVE ? 2 :\r\n            this.armorState == ArmorState.FLASH  ? (1 + Math.floor(this.timerArm * this.armorFlashRate) % 2) : \r\n            1)\r\n    }\r\n\r\n    constructor(params: CharacterBotParams) {\r\n        super(Object.assign(params, characterBotOverride));\r\n\r\n        //Setup miscellaneous animations.\r\n        params.animsMisc.forEach(m => {\r\n\r\n            //Build a new animation, store it here and in the scene\r\n            var newIndex = this.animatGroups.push([]) - 1;\r\n\r\n            //3 slices if sliced, 1 otherwise\r\n            for(let i = -1; i <= (m.isSliced ? 1 : -1); i ++) {\r\n\r\n                this.animatGroups[newIndex].push(new Animat({\r\n                    ...params,\r\n                    speed :      m.speed,\r\n                    images :     m.images,\r\n                    sliceIndex : m.isSliced ? i : null,\r\n                    framesSize : m.isSliced ? GMULTX * 2 : m.framesSize,\r\n                    gposOffset : m.gposOffset,\r\n                    zModifier :  m.isSliced ? (i < 1 ? 300 : 29) : m.zModifier,\r\n                    frameCount : m.frameCount,\r\n                    animsCount : m.animsCount,\r\n                    isLoop :     m.isLoop\r\n                } as AnimationParams));\r\n            }\r\n            this.animatGroups[newIndex].forEach(a => this.parent.pushGO(a));\r\n        });\r\n    }\r\n\r\n    //Unique bot update\r\n    public update(dt : number) {\r\n        super.update(dt);\r\n\r\n        //Update armor flash\r\n        if(this.armorState == ArmorState.FLASH) {\r\n            this.timerArm += dt;\r\n            this.animatGroupCurr.forEach(x => x.setImageIndex(this.animImageIndex));\r\n\r\n            //Remove armor after a duration and reset timer\r\n            if(this.timerArm > this.armorDelay) {\r\n                this.armorState = ArmorState.NONE;\r\n                this.timerArm = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    //Special movement\r\n    protected handleSpecialMovement(dt : number) {\r\n\r\n        this.timerSpc += dt;   //Update special timer\r\n\r\n        //Perform special movement\r\n        switch(this.animatGroupsIndex) {\r\n\r\n            //Vertical movement.\r\n            case 3 : \r\n                \r\n                //Bot is jumping\r\n                if(this.flightState == FlightState.JUMP) {\r\n                    \r\n                    this.moveVertical(dt);\r\n                    this.spos.x += this.move.x * this.horzSpeed * dt;\r\n                    this.vertSpeed += this.vertAccel * dt;\r\n                }\r\n                //Bot is moving vertically\r\n                else {\r\n\r\n                    this.vertSpeed = \r\n                        this.vertSpeedMax * (\r\n                            this.flightState == FlightState.UPWARD ? \r\n                            1 : \r\n                            -1);\r\n\r\n                    this.moveVertical(dt);\r\n                    this.flightState = FlightState.NONE;  //Unset for next collision check, UPWARD requires constant collision\r\n                }\r\n                break;\r\n            \r\n            //Default is do nothing\r\n            default :\r\n                break;\r\n        }\r\n\r\n        //If the current animation has ended\r\n        if(this.timerSpc > this.animatGroupCurr[0].duration) {\r\n\r\n            //Reset timer\r\n            this.timerSpc = 0;\r\n\r\n            switch(this.animatGroupsIndex) {\r\n\r\n                //Deactivate this character\r\n                case 2 :\r\n                    this.isActive = false;\r\n                    break;\r\n\r\n                //Reset up/down animation\r\n                case 3 :\r\n                    this.animatGroupCurr.forEach(a => a.reset());\r\n                    break;\r\n                \r\n                //End animation\r\n                default :\r\n                    this.setCurrentGroup(0);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    //Vertical motion\r\n    private moveVertical(dt: number) {\r\n\r\n        this.spos.y -= dt * this.vertSpeed;     //Move subposition vertically based on speed\r\n        const dir = Math.sign(this.vertSpeed);  //Store direction of virtical speed\r\n        \r\n        //If the direction has no obstacles\r\n        if(this.getCollisionVetical(dir)) {\r\n\r\n            this.animatGroupCurr.forEach(a => a.spos = this.spos);\r\n        }\r\n        else {\r\n\r\n            //If going upwards, collide with ceiling\r\n            if(dir > 0) {\r\n                this.flightState = FlightState.UPWARD;  //Bonk!\r\n                this.spos.y = this.ceilSubOffset;\r\n                this.animatGroupCurr.forEach(a => {\r\n                    a.zModifierPub = 0;\r\n                    a.spos.y = this.ceilSubOffset;\r\n                });\r\n            }\r\n            //If going downwards, reset to walking\r\n            else {\r\n\r\n                this.timerSpc = 0;\r\n                this.vertSpeed = this.vertSpeedMax;\r\n                this.handleBricks(); \r\n                this.setCurrentGroup(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    //Return true if the given vertical direction is free of bricks\r\n    private getCollisionVetical(dir : number) : boolean {\r\n\r\n        //If moving upward and hit the ceiling, return false\r\n        if(dir > 0 && this.gpos.y <= this.height + 1) {\r\n            return false;\r\n        }\r\n\r\n        //Check for bricks in travelling direction\r\n        return !this.brickHandler.checkCollisionRange(\r\n            this.gpos.getSub({\r\n                x : 1,\r\n                y : dir > 0 ? 1 + this.height : 0\r\n            }), //Position\r\n            0,  //START\r\n            2,  //FINAL\r\n            1,  //HEIGHT\r\n            1); //Direction\r\n    }\r\n\r\n    //Check and resolve brick collisions\r\n    protected handleCollision() {\r\n\r\n        //Collision bitmask\r\n        const cbm = this.brickHandler.checkCollisionRange(\r\n            this.gpos.getSub({\r\n                x : this.move.x > 0 ? 1 : 0, \r\n                y : 1 + this.height\r\n            }),             //Position\r\n            5,              //START :  n + 1\r\n            15,             //FINAL : (n + 3) * 2 + 1\r\n            7,              //HEIGHT:  n + 3\r\n            this.move.x);   //Direction\r\n        \r\n        //WALL BOUNDARY\r\n        if(\r\n            this.gpos.x - 1 < BOUNDARY.minx || \r\n            this.gpos.x + 1 > BOUNDARY.maxx) {\r\n\r\n            this.reverse();\r\n        }\r\n        else {\r\n\r\n            //WALL - REVERSE\r\n            if(cbm & cbc.wall) {\r\n                this.reverse();\r\n            }\r\n            //HEAD-WALL - REVERSE\r\n            else if(cbm & cbc.head && cbm & cbc.flor) {\r\n                this.reverse();\r\n            }\r\n            //UP-STEP - GO UP\r\n            else if(cbm & cbc.step) {\r\n\r\n                //BLOCKED BY CEILING\r\n                if(cbm & cbc.ceil || this.gpos.y <= BOUNDARY.miny + 3) {\r\n                    this.reverse();\r\n                }\r\n                else {\r\n                    this.gpos.y -= 1;\r\n                }\r\n            }\r\n            //FLOOR - DO NOTHING\r\n            else if(cbm & cbc.flor) {\r\n\r\n            }\r\n            //DOWN-STEP - GO DOWN\r\n            else if(cbm & cbc.down) {\r\n                this.gpos.y += 1;\r\n            }\r\n            //VOID - REVERSE\r\n            else {\r\n                this.reverse();\r\n            }\r\n        }\r\n    }\r\n\r\n    //Set bot to a flight state\r\n    private setFlightState(state : FlightState) {\r\n        this.flightState = state;\r\n\r\n        if(this.animatGroupsIndex != 3) {\r\n            this.handleBricks(true);    //Bricks should not be pressured by a floating character\r\n            this.setCurrentGroup(3);    //Play floating animation\r\n            this.spos.x = 0;            //Force grid alignment\r\n        }\r\n    }\r\n\r\n    //Colliders for non-brick collisions\r\n    public getColliders() : Collider[] {\r\n        \r\n        return [{ \r\n            mask : 0b1111, //All collisions\r\n            min : this.gpos.getAdd({ x : -1, y : 1 - this.height}),\r\n            max : this.gpos.getAdd({ x :  1, y : 1}) \r\n        },{ \r\n            mask : 0,       //Passive\r\n            min : this.gpos.getAdd({ x : -1, y : 1 - this.height}),\r\n            max : this.gpos.getAdd({ x :  1, y : 1}) \r\n        },{ \r\n            mask : 0b1010000, //Armor & Jump collides with legs\r\n            min : this.gpos.getAdd({ x : -1 - Math.min(this.move.x, 0), y : 0}),\r\n            max : this.gpos.getAdd({ x :    - Math.min(this.move.x, 0), y : 1}) \r\n        }];\r\n    }\r\n\r\n    //Explode\r\n    public resolveCollision(mask : number) {\r\n\r\n        //Eat\r\n        if (mask & 0b010) {\r\n            this.setCurrentGroup(1);\r\n        }\r\n        //Hazard\r\n        else if (mask & 0b100 && this.isNormalMovment) {\r\n\r\n            //Start flashing animation after taking damage\r\n            if(this.armorState == ArmorState.ACTIVE) {\r\n                this.armorState = ArmorState.FLASH\r\n            }\r\n            //If unarmored, die.\r\n            else if(this.armorState == ArmorState.NONE) {\r\n                this.setCurrentGroup(2);\r\n            }\r\n        }\r\n        //Up\r\n        else if (mask & 0b1000) {\r\n            this.setFlightState(FlightState.UPWARD)\r\n        }\r\n        //Armor\r\n        else if (mask & 0b10000) {\r\n            this.armorState = ArmorState.ACTIVE;\r\n            this.setCurrentGroup(4);\r\n        }\r\n        //Flight\r\n        else if (mask & 0b1000000) {\r\n            this.setFlightState(FlightState.JUMP)\r\n        }\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
