{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\charactergearclimb.ts"],
  "sourcesContent": ["import GameObject, { Collision } from \"engine/gameobjects/gameobject\";\r\nimport { RING_BITSTACK as gcb, MASKS, zip } from \"engine/utilities/math\";\r\nimport { Point } from \"engine/utilities/vect\";\r\nimport Anim, { AnimationParams } from \"./anim\";\r\nimport { CharacterParams } from \"./character\";\r\nimport CharacterGear, { GearState } from \"./charactergear\";\r\n\r\n/** Specifications of a climb character */\r\nconst CharacterGearClimbOverride = Object.freeze({\r\n    height: 2,\r\n    speed : 3.0,\r\n    animMain : {\r\n        images : [\r\n            { name : \"char_rbc_left\",   offsetX : 0 },\r\n            { name : \"char_rbc_right\",  offsetX : 0},\r\n            { name : \"char_rbc_up\",     offsetX : 0},\r\n            { name : \"char_rbc_down\",   offsetX : 0}],\r\n        frameCount : 2,\r\n        animsCount : 1\r\n    },\r\n    isGlide : true,\r\n\r\n    // Misc animation parameters\r\n    animsMisc : [{\r\n        speed : 3.0,\r\n        images : [{ name : \"char_rbc_stop\", offsetX : 0 }],\r\n        frameCount : 2,\r\n        gposOffset : { x : -3, y : 0}\r\n    },{\r\n        speed : 3.0,\r\n        images : [{ name : \"char_rbc_up\", offsetX : 0 }],\r\n        frameCount : 2,\r\n        gposOffset : { x : -3, y : 0}\r\n    }]\r\n});\r\n\r\n/** A New Kind of Gearbot!  */\r\nexport default class CharacterGearClimb extends CharacterGear {\r\n    \r\n    private vertMax :   number = 3;                 // Maximum vertical climb height\r\n    private vertCount : number = 0;                 // Vertical climb tracker\r\n    private burstAnim : Anim;\r\n    \r\n    protected get animationSubindex() : number {    // Include up & down animations (reminder : animation arrays are zippered)\r\n\r\n        // Animation is based on up/down movement\r\n        switch(this.move.y) {\r\n\r\n            // Move forward, please.\r\n            case 0 :\r\n                return this.move.x;\r\n\r\n            // Move up\r\n            case -1 : \r\n                return zip(2);\r\n\r\n            // Move down\r\n            default : \r\n                return zip(3);\r\n        }\r\n    }\r\n\r\n    /** Constructor */\r\n    constructor(params: CharacterParams) {\r\n        super(Object.assign(params, CharacterGearClimbOverride));\r\n\r\n        this.burstAnim = this.parent.pushGO(new Anim({\r\n            ...params,\r\n            images : [{ name : \"char_rbc_burst\" }], // Single hotplate animation image\r\n            speed : 3,                              // Hotplate animation is weirdly fast\r\n            frameCount : 6,\r\n            zIndex : 50000\r\n        } as AnimationParams)) as Anim;\r\n    }\r\n\r\n    /** Update this character */\r\n    public update(dt: number) {\r\n        super.update(dt);\r\n\r\n        this.burstAnim.spos = this.spos.getAdd({x : -25, y : 16});\r\n    }\r\n\r\n    /** Update position to move forward */\r\n    public handleStep() {\r\n\r\n        // Don't update position for special states (WAIT, HALT, etc)\r\n        if (this.stateIndex != GearState.NORMAL) {\r\n            return;\r\n        }\r\n\r\n        // Move in different directions based on state\r\n        switch(this.move.y) {\r\n\r\n            // Move forward, please.\r\n            case 0 : \r\n                this.moveAll({x : this.move.x, y : 0});\r\n                break;\r\n\r\n            // Move down\r\n            case 1 : \r\n                this.moveAll({x : 0, y : 1});\r\n                break;\r\n\r\n            // Move up\r\n            case -1 : \r\n                this.moveAll({x : 0, y : -1});\r\n                this.vertCount ++;\r\n                break;\r\n        }\r\n\r\n        //Update burst animation\r\n        this.burstAnim.reset(this.gpos);\r\n    }    \r\n    \r\n    /** */\r\n    public handleStepUpdate(proxs : Point[]) {\r\n        super.handleStepUpdate(proxs);\r\n\r\n        switch(this.stateIndex) {\r\n\r\n            //Currently moving. Normal checks for FORWARD & DOWN, special check for UP\r\n            case GearState.NORMAL :\r\n\r\n                //Handle vertical states differently\r\n                switch(this.move.y) {\r\n\r\n                    // Moving forward or down\r\n                    case 0 : \r\n                    case 1 : \r\n                        this.handleStandardStep();\r\n                        break;\r\n        \r\n                    // Moving up\r\n                    case -1 : \r\n                        //Forward ledge, go forward, but don't climb each other\r\n                        if(!this.isColFace && this.isColLand &&\r\n                            !proxs.some(p => p.y == 2 && Math.sign(p.x) == this.move.x)) {\r\n\r\n                            this.vertCount = 0;\r\n                            this.move.y = 0;\r\n                            this.setStateIndex(GearState.NORMAL);\r\n                        }\r\n                        //Rear ledge, go backwards, but don't climb each other\r\n                        else if(!this.isColBack && this.isColBand &&\r\n                            !proxs.some(p => p.y == 2 && Math.sign(p.x) == -this.move.x)) {\r\n\r\n                            this.vertCount = 0;\r\n                            this.move.y = 0;\r\n                            this.setStateIndex(GearState.NORMAL);\r\n                            this.reverse();\r\n                        }\r\n                        //Height limit or blocked, stop climbing\r\n                        else if(this.isColRoof || this.vertCount >= this.vertMax) {\r\n\r\n                            this.vertCount = 0;\r\n                            this.reverse();\r\n                            this.setStateIndex(GearState.WAIT);\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n\r\n            //Currently stuck. Keep checking normal movement while stopped.\r\n            case GearState.STOP :\r\n                this.handleStandardStep();\r\n                break;\r\n\r\n            //Currently waiting. Go up if not blocked, do standard check otherwise\r\n            case GearState.WAIT :\r\n\r\n                //Move down if there is no floor\r\n                if(!this.isColFlor) {\r\n                    this.move.y = 1;\r\n                    this.setStateIndex(GearState.NORMAL);\r\n                }\r\n                //Move up if there is no ceiling\r\n                else if(!this.isColRoof) {\r\n                    this.move.y = -1;\r\n                    this.setStateIndex(GearState.NORMAL);\r\n                }\r\n                //Move back if there is no wall behind\r\n                else if(!this.isColBack) {\r\n                    this.move.y = 0;\r\n                    this.setStateIndex(GearState.NORMAL);\r\n                    this.reverse();\r\n                }\r\n                //Move forward if there is floor\r\n                else if(!this.isColFace) {\r\n                    this.move.y = 0;\r\n                    this.setStateIndex(GearState.NORMAL);\r\n                }\r\n                //Completely boxed in, just stop\r\n                else {\r\n                    this.move.y = 0;\r\n                    this.setStateIndex(GearState.STOP);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /** */\r\n    private handleStandardStep() {\r\n\r\n        //Move down if there is no floor\r\n        if(!this.isColFlor) {\r\n            this.move.y = 1;\r\n            this.setStateIndex(GearState.NORMAL);\r\n        }\r\n        //Move forward if there is floor\r\n        else if(!this.isColFace) {\r\n\r\n            this.move.y = 0;\r\n            this.setStateIndex(GearState.NORMAL);\r\n        }\r\n        //Move up if there is no ceiling\r\n        else if(!this.isColRoof) {\r\n\r\n            this.move.y = 0;\r\n            this.setStateIndex(GearState.WAIT);\r\n        }\r\n        //Move back if there is no wall behind\r\n        else if(!this.isColBack) {\r\n\r\n            this.move.y = 0;\r\n            this.setStateIndex(GearState.WAIT);\r\n        }\r\n        //Completely boxed in, just stop\r\n        else {\r\n            this.move.y = 0;\r\n            this.setStateIndex(GearState.STOP);\r\n        }\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
