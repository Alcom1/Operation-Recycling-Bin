{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\bricktilefan.ts"],
  "sourcesContent": ["import { Collider } from \"engine/modules/collision\";\r\nimport { MASKS, Z_DEPTH } from \"engine/utilities/math\";\r\nimport Anim, { AnimationParams } from \"./anim\";\r\nimport BrickHandler from \"./brickhandler\";\r\nimport BrickTile, { BrickTileParams } from \"./bricktile\";\r\nimport Character from \"./character\";\r\n\r\n/** Specifications of a fan tile */\r\nconst BrickTileFanOverride = Object.freeze({\r\n    images : [\"brick_tile\", \"brick_tile_fan\"],\r\n    width : 4\r\n});\r\n\r\n/** Tile with a fan effect */\r\nexport default class BrickTileFan extends BrickTile {\r\n\r\n    private brickHandler!: BrickHandler;    // Brickhandler to get bricks to block wind effects\r\n    private animations: Anim[] = [];        // Wind animations\r\n    private beams: number[] = [];           // Beams of wind effects\r\n    private characters: Character[] = [];   // Characters being tracked to block wind effects\r\n\r\n    /** Constructor */\r\n    constructor(params: BrickTileParams) {\r\n        super(Object.assign(params, BrickTileFanOverride));\r\n\r\n        // Going up to the ceiling\r\n        for(let j = this.gpos.y - 1; j > 0; j--) {\r\n            // Generate a wind animation for each position\r\n            [0,1].forEach(i => {\r\n                this.animations.push(this.parent.pushGO(new Anim({\r\n                    ...params,\r\n                    zNoCompare : true,\r\n                    tags : [\"Wind\"],\r\n                    position : {x : this.gpos.x + i + 1, y : j},\r\n                    subPosition : { x : Z_DEPTH / 2 - 2, y : -Z_DEPTH / 2 + 2 }, \r\n                    images : [{ name : \"part_wind\" }],\r\n                    speed : 2,\r\n                    frameCount : 6,\r\n                    isLoop : true                                        \r\n                } as AnimationParams)) as Anim);\r\n            })\r\n        }\r\n    }\r\n\r\n    /** Initialize this fan */\r\n    public init() {\r\n\r\n        // Get brick handler to to check brick-wind collisions\r\n        this.brickHandler = this.engine.tag.get(\r\n            \"BrickHandler\", \r\n            \"LevelInterface\")[0] as BrickHandler;\r\n\r\n        // Get characters to stop wind\r\n        this.characters = this.engine.tag.get(\r\n            \"Character\", \r\n            \"Level\") as Character[];\r\n    }\r\n\r\n    /** Update wind beams */\r\n    public update() {\r\n        \r\n        // Set the beams for the collider (also for drawing the animations)\r\n        this.setBeams();\r\n    }\r\n\r\n    /** Set wind beams */\r\n    private setBeams() {\r\n\r\n        // 2 beams per fan\r\n        this.beams = [1, 2] \r\n        // Collide wind beams with bricks\r\n        .map(i => {\r\n            return this.brickHandler.checkCollisionRange(            \r\n                { x : this.gpos.x + i, y : -1 },        // Position\r\n                1,\r\n                0,                                      // START\r\n                this.gpos.y - 1,                        // FINAL\r\n                this.gpos.y - 1).toString(2).length;    // HEIGHT\r\n        })\r\n        // Collide wind beams with characters\r\n        .map((b, i) => {\r\n\r\n            let ret = b;\r\n\r\n            // Collide with each character\r\n            this.characters.forEach(c => {\r\n                if (c.gpos.y <= this.gpos.y &&\r\n                    [1,2].some(x => x == c.gpos.x - this.gpos.x - i)) {\r\n                    ret = Math.max(ret, c.gpos.y - c.height + 3);   // Stop beam underneath characters\r\n                }\r\n            });\r\n\r\n            return ret;\r\n        });\r\n\r\n        // Set animations\r\n        this.beams.forEach((y, x) => {\r\n            this.animations.forEach(a => {\r\n                if (a.gpos.x == this.gpos.x + x + 1) {\r\n                    a.isVisible = this.isOn && a.gpos.y >= y\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /** Get hazard and passive colliders of this brick. */\r\n    public getColliders() : Collider[] {\r\n        \r\n        // Combine with passive collider from base class\r\n        return super.getColliders().concat(this.isOn ? \r\n            this.beams.map((b, i) => {\r\n                return {\r\n                    mask : MASKS.float,\r\n                    min : { x : this.gpos.x + i + 1, y : b },\r\n                    max : this.gpos.getAdd({ x : i + 2, y :  0})\r\n                }\r\n            }) : \r\n            []);\r\n    }\r\n}"],
  "mappings": "AACA;AACA;AAEA;AAIA,MAAM,uBAAuB,OAAO,OAAO;AAAA,EACvC,QAAS,CAAC,cAAc;AAAA,EACxB,OAAQ;AAAA;AAVZ,0CAc0C;AAAA,EAQtC;AACI,UAAM,OAAO,OAAO,QAAQ;AANxB,sBAAqB;AACrB,iBAAkB;AAClB,sBAA0B;AAO9B,iBAAY,KAAK,KAAK,IAAI,GAAG,IAAI,GAAG;AAEhC,OAAC,GAAE,GAAG,QAAQ;AACV,aAAK,WAAW,KAAK,KAAK,OAAO,OAAO,IAAI,KAAK;AAAA,aAC1C;AAAA,UACH,YAAa;AAAA,UACb,MAAO,CAAC;AAAA,UACR,UAAW,CAAC,GAAI,KAAK,KAAK,IAAI,IAAI,GAAG,GAAI;AAAA,UACzC,aAAc,CAAE,GAAI,UAAU,IAAI,GAAG,GAAI,CAAC,UAAU,IAAI;AAAA,UACxD,QAAS,CAAC,CAAE,MAAO;AAAA,UACnB,OAAQ;AAAA,UACR,YAAa;AAAA,UACb,QAAS;AAAA;AAAA;AAAA;AAAA;AAAA,EAOlB;AAGH,SAAK,eAAe,KAAK,OAAO,IAAI,IAChC,gBACA,kBAAkB;AAGtB,SAAK,aAAa,KAAK,OAAO,IAAI,IAC9B,aACA;AAAA;AAAA,EAID;AAGH,SAAK;AAAA;AAAA,EAID;AAGJ,SAAK,QAAQ,CAAC,GAAG,GAEhB,IAAI;AACD,aAAO,KAAK,aAAa,oBACrB,CAAE,GAAI,KAAK,KAAK,IAAI,GAAG,GAAI,KAC3B,GACA,GACA,KAAK,KAAK,IAAI,GACd,KAAK,KAAK,IAAI,GAAG,SAAS,GAAG;AAAA,OAGpC,IAAI;AAED,gBAAU;AAGV,WAAK,WAAW,QAAQ;AACpB,YAAI,EAAE,KAAK,KAAK,KAAK,KAAK,KACtB,CAAC,GAAE,GAAG,KAAK,OAAK,KAAK,EAAE,KAAK,IAAI,KAAK,KAAK,IAAI;AAC9C,gBAAM,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,EAAE,SAAS;AAAA;AAAA;AAIlD,aAAO;AAAA;AAIX,SAAK,MAAM,QAAQ;AACf,WAAK,WAAW,QAAQ;AACpB,YAAI,EAAE,KAAK,KAAK,KAAK,KAAK,IAAI,IAAI;AAC9B,YAAE,YAAY,KAAK,QAAQ,EAAE,KAAK,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,EAOhD;AAGH,WAAO,MAAM,eAAe,OAAO,KAAK,OACpC,KAAK,MAAM,IAAI;AACX,aAAO;AAAA,QACH,MAAO,MAAM;AAAA,QACb,KAAM,CAAE,GAAI,KAAK,KAAK,IAAI,IAAI,GAAG,GAAI;AAAA,QACrC,KAAM,KAAK,KAAK,OAAO,CAAE,GAAI,IAAI,GAAG,GAAK;AAAA;AAAA,SAGjD;AAAA;AAAA;",
  "names": []
}
