{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\character.ts"],
  "sourcesContent": ["import Engine from \"engine/engine\";\r\nimport Scene from \"engine/scene/scene\";\r\nimport GameObject, { GameObjectParams } from \"engine/gameobjects/gameobject\";\r\nimport { BOUNDARY, getZIndex, GMULTX, GMULTY, round } from \"engine/utilities/math\";\r\nimport Vect, { Point } from \"engine/utilities/vect\";\r\nimport BrickHandler from \"./brickhandler\";\r\nimport Brick from \"./brick\";\r\nimport Cursor from \"./cursor\";\r\n\r\nexport interface CharacterParams extends GameObjectParams {\r\n    speed? : number;\r\n    imageRight : CharacterImageParams;\r\n    imageLeft : CharacterImageParams;\r\n    animFrames : number;\r\n    animCount : number;\r\n}\r\n\r\nexport interface CharacterImageParams {\r\n    name : string;\r\n    extension : string;\r\n    offset : number;\r\n}\r\n\r\nexport interface CharacterImage {\r\n    image : HTMLImageElement;\r\n    offset : number;\r\n}\r\n\r\nexport default class Character extends GameObject {\r\n\r\n    private level!: Scene;\r\n    private speed: number;\r\n    protected _height: number;\r\n    public get height() { return this._height; }\r\n    protected move: Vect;\r\n    protected brickHandler!: BrickHandler;\r\n    private underBricks: Brick[] = [];\r\n    private cursor!: Cursor;\r\n    protected checkCollision: boolean;\r\n\r\n    protected imageRight : CharacterImage;\r\n    protected imageLeft : CharacterImage;\r\n    protected animFrames : number;\r\n    protected animWidth : number = 0;\r\n    protected animHeight : number = 0;\r\n    protected animCount : number;\r\n    protected animTrack : number = 0;\r\n    protected timer : number = 0;\r\n\r\n    constructor(engine: Engine, params: CharacterParams) {\r\n        super(engine, params);\r\n        \r\n        this.speed = params.speed ?? 1; //Default speed\r\n        this.move = new Vect(1, 0);     //Default move directions\r\n        this._height = 2;               //Default height for a character\r\n        this.checkCollision = true;\r\n\r\n        this.imageRight = {\r\n            image : this.engine.library.getImage(\r\n                params.imageRight.name, \r\n                params.imageRight.extension),\r\n            offset : params.imageRight.offset\r\n        };\r\n\r\n        this.imageLeft = {\r\n            image : this.engine.library.getImage(\r\n                params.imageLeft.name, \r\n                params.imageLeft.extension),\r\n            offset : params.imageLeft.offset\r\n        };\r\n\r\n        this.animFrames = params.animFrames;\r\n        this.animCount = params.animCount;\r\n    }\r\n\r\n    public init(ctx: CanvasRenderingContext2D, scenes: Scene[]) {\r\n\r\n        // Get level.\r\n        const level = scenes.find(s => s.name == \"Level\");\r\n        if (!level) throw new Error(\"Can't find level\");\r\n        this.level = level;\r\n\r\n        // Get brickhandler for pressure checks\r\n        this.brickHandler = this.engine.tag.get(\"BrickHandler\", \"LevelInterface\")[0] as BrickHandler;\r\n\r\n        //Wait for init, images are guaranteed loaded by then\r\n        this.animWidth = this.imageRight.image.width / this.animFrames;\r\n        this.animHeight = this.imageRight.image.height;\r\n    }\r\n\r\n    public update(dt: number) {\r\n\r\n        //Increment timer by delta-time\r\n        this.timer += dt;\r\n\r\n        //Increment position by speed\r\n        this.spos.x += this.move.x * this.speed * GMULTX * dt;\r\n\r\n        //Step grid position further once subposition goes past a grid-unit\r\n        if (Math.abs(this.spos.x) > GMULTX) {\r\n            this.timer = 0;\r\n\r\n            var dir = Math.sign(this.spos.x);\r\n\r\n            this.spos.x -= GMULTX * dir;\r\n            this.gpos.x += dir;\r\n\r\n            this.zIndex = getZIndex(this.gpos, 2);\r\n            this.level.sortGO();\r\n\r\n            this.checkCollision = true;\r\n\r\n            this.animTrack = ++this.animTrack % this.animCount \r\n        }\r\n\r\n        //Check collision\r\n        if(this.checkCollision) {\r\n\r\n            this.handleCollision();\r\n            this.handleBricks();\r\n\r\n            this.checkCollision = false;\r\n        }\r\n    }\r\n\r\n    private handleBricks() {\r\n\r\n        this.underBricks.forEach(b => b.pressure -= 1);\r\n\r\n        this.underBricks = this.brickHandler.checkCollisionRow(\r\n            this.gpos.getAdd({x : -1, y : 1}), \r\n            2);\r\n\r\n        this.underBricks.forEach(b => b.pressure += 1);\r\n        this.brickHandler.isPressured = true;\r\n    }\r\n\r\n    protected handleCollision() {\r\n\r\n    }\r\n\r\n    protected reverse() {\r\n        this.move.x *= -1;\r\n        this.gpos.x += this.move.x;\r\n    }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D) {\r\n\r\n        // console.dir(this.imageRight);\r\n        // debugger;\r\n\r\n        ctx.translate(-this.spos.x, 0);\r\n\r\n        ctx.drawImage(\r\n            this.move.x > 0 ? this.imageRight.image : this.imageLeft.image,\r\n            round((\r\n                this.animTrack +\r\n                this.timer * \r\n                this.speed) * \r\n                this.animWidth * \r\n                this.animFrames / \r\n                this.animCount - \r\n\r\n                this.animWidth / 2,\r\n\r\n                this.animWidth),\r\n            0,\r\n            this.animWidth,\r\n            this.animHeight, \r\n\r\n           -GMULTX - (this.move.x > 0 ? this.imageRight.offset : this.imageLeft.offset),\r\n            GMULTY - this.animHeight,\r\n            this.animWidth,\r\n            this.animHeight);\r\n\r\n        // ctx.globalAlpha = 0.5;\r\n        // ctx.strokeStyle = \"#F00\"\r\n        // ctx.lineWidth = 4;\r\n        // ctx.strokeRect(\r\n        //     -GMULTX, \r\n        //     GMULTY, \r\n        //     GMULTX * 2, \r\n        //     GMULTY * -4);\r\n    }\r\n}\r\n"],
  "mappings": "AAEA;AACA;AACA;AAJA,uCA4BuC;AAAA,EAqBnC,YAAY;AACR,UAAM,SAAQ;AAdV,uBAAuB;AAOrB,qBAAqB;AACrB,sBAAsB;AAEtB,qBAAqB;AACrB,iBAAiB;AAKvB,SAAK,QAAQ,OAAO,SAAS;AAC7B,SAAK,OAAO,IAAI,KAAK,GAAG;AACxB,SAAK,UAAU;AACf,SAAK,iBAAiB;AAEtB,SAAK,aAAa;AAAA,MACd,OAAQ,KAAK,OAAO,QAAQ,SACxB,OAAO,WAAW,MAClB,OAAO,WAAW;AAAA,MACtB,QAAS,OAAO,WAAW;AAAA;AAG/B,SAAK,YAAY;AAAA,MACb,OAAQ,KAAK,OAAO,QAAQ,SACxB,OAAO,UAAU,MACjB,OAAO,UAAU;AAAA,MACrB,QAAS,OAAO,UAAU;AAAA;AAG9B,SAAK,aAAa,OAAO;AACzB,SAAK,YAAY,OAAO;AAAA;AAAA,MAvCjB;AAAW,WAAO,KAAK;AAAA;AAAA,EA0C3B;AAGH,kBAAc,OAAO,KAAK,OAAK,EAAE,QAAQ;AACzC,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM;AAC5B,SAAK,QAAQ;AAGb,SAAK,eAAe,KAAK,OAAO,IAAI,IAAI,gBAAgB,kBAAkB;AAG1E,SAAK,YAAY,KAAK,WAAW,MAAM,QAAQ,KAAK;AACpD,SAAK,aAAa,KAAK,WAAW,MAAM;AAAA;AAAA,EAGrC;AAGH,SAAK,SAAS;AAGd,SAAK,KAAK,KAAK,KAAK,KAAK,IAAI,KAAK,QAAQ,SAAS;AAGnD,QAAI,KAAK,IAAI,KAAK,KAAK,KAAK;AACxB,WAAK,QAAQ;AAEb,gBAAU,KAAK,KAAK,KAAK,KAAK;AAE9B,WAAK,KAAK,KAAK,SAAS;AACxB,WAAK,KAAK,KAAK;AAEf,WAAK,SAAS,UAAU,KAAK,MAAM;AACnC,WAAK,MAAM;AAEX,WAAK,iBAAiB;AAEtB,WAAK,YAAY,EAAE,KAAK,YAAY,KAAK;AAAA;AAI7C,QAAG,KAAK;AAEJ,WAAK;AACL,WAAK;AAEL,WAAK,iBAAiB;AAAA;AAAA;AAAA,EAItB;AAEJ,SAAK,YAAY,QAAQ,OAAK,EAAE,YAAY;AAE5C,SAAK,cAAc,KAAK,aAAa,kBACjC,KAAK,KAAK,OAAO,CAAC,GAAI,IAAI,GAAI,KAC9B;AAEJ,SAAK,YAAY,QAAQ,OAAK,EAAE,YAAY;AAC5C,SAAK,aAAa,cAAc;AAAA;AAAA,EAG1B;AAAA;AAAA,EAIA;AACN,SAAK,KAAK,KAAK;AACf,SAAK,KAAK,KAAK,KAAK,KAAK;AAAA;AAAA,EAGtB;AAKH,QAAI,UAAU,CAAC,KAAK,KAAK,GAAG;AAE5B,QAAI,UACA,KAAK,KAAK,IAAI,IAAI,KAAK,WAAW,QAAQ,KAAK,UAAU,OACzD,MACI,MAAK,YACL,KAAK,QACL,KAAK,SACL,KAAK,YACL,KAAK,aACL,KAAK,YAEL,KAAK,YAAY,GAEjB,KAAK,YACT,GACA,KAAK,WACL,KAAK,YAEN,CAAC,SAAU,MAAK,KAAK,IAAI,IAAI,KAAK,WAAW,SAAS,KAAK,UAAU,SACpE,SAAS,KAAK,YACd,KAAK,WACL,KAAK;AAAA;AAAA;",
  "names": []
}
