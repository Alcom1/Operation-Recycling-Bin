{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\character.ts"],
  "sourcesContent": ["import Engine from \"engine/engine\";\r\nimport GameObject, { GameObjectParams } from \"engine/gameobjects/gameobject\";\r\nimport { BOUNDARY, GMULTX, GMULTY } from \"engine/utilities/math\";\r\nimport Vect, { Point } from \"engine/utilities/vect\";\r\nimport BrickHandler from \"./brickhandler\";\r\n\r\ninterface CharacterParams extends GameObjectParams {\r\n    size?: Point;\r\n    speed?: number;\r\n}\r\n\r\nexport default class Character extends GameObject {\r\n    private size: Vect;\r\n    private speed: number;\r\n    private text: string = '';\r\n    private move: Vect;\r\n    private brickHandler!: BrickHandler;\r\n    private checkCollision: boolean;\r\n\r\n    constructor(engine: Engine, params: CharacterParams) {\r\n        super(engine, params);\r\n        this.size = new Vect(params.size?.x ?? 0, params.size?.y ?? 0);\r\n        this.speed = params.speed ?? 1;\r\n        this.move = new Vect(1, 1);\r\n        this.checkCollision = true;\r\n    }\r\n\r\n    public init(ctx: CanvasRenderingContext2D) {\r\n        \r\n        this.brickHandler = this.engine.tag.get(\"BrickHandler\", \"LevelInterface\")[0] as BrickHandler;\r\n    }\r\n\r\n    public update(dt: number) {\r\n\r\n        //Increment position by speed\r\n        this.spos.x += this.move.x * this.speed * GMULTX * dt;\r\n\r\n        //Step grid position further once subposition goes past a grid-unit\r\n        if (Math.abs(this.spos.x) > GMULTX) {\r\n            var dir = Math.sign(this.spos.x);\r\n\r\n            this.spos.x -= GMULTX * dir;\r\n            this.gpos.x += dir;\r\n\r\n            this.checkCollision = true;\r\n        }\r\n\r\n        if (this.checkCollision) {\r\n\r\n            //Block value - number that indicates the existence and position of a blocking elements\r\n            let block = this.getCollsion();\r\n\r\n            //Walls\r\n            if (this.gpos.x - 1 < BOUNDARY.minx ||          //Left-level border\r\n                this.gpos.x + 1 > BOUNDARY.maxx || (        //Right level border\r\n                block > 0 && block < this.size.y - 1)) {    //Normal wall\r\n\r\n                console.log(\"MOVE - WALL\");\r\n                this.move.x *= -1;\r\n                this.gpos.x += this.move.x;\r\n            }\r\n            //Other states\r\n            else {\r\n                \r\n                switch (block) {\r\n\r\n                    //No bricks - go back\r\n                    case -1:\r\n                        console.log(\"MOVE - CLIFF\");\r\n                        this.move.x *= -1;\r\n                        break;\r\n\r\n                    //Head brick - check for down stair\r\n                    case 0:\r\n                        console.log(\"MOVE - HEADBLOCK\");\r\n                        this.move.x *= -1;\r\n                        break;\r\n\r\n                    //Up-step brick - step upwards\r\n                    case this.size.y - 1:\r\n                        console.log(\"MOVE - UP\");\r\n                        this.gpos.y -= 1;\r\n                        break;\r\n\r\n                    //Floor brick - continue forward\r\n                    case this.size.y:\r\n                        console.log(\"MOVE\");\r\n                        break;\r\n                    \r\n                    //Down-step - step downwards\r\n                    case this.size.y + 1:\r\n                        console.log(\"MOVE - DOWN\");\r\n                        this.gpos.y += 1;\r\n                        break;\r\n                }\r\n            }\r\n        \r\n            //Do not check collisions until the next step\r\n            this.checkCollision = false;\r\n        }\r\n    }\r\n\r\n    /** Check collision and return the block-value */\r\n    private getCollsion(): number {\r\n\r\n        //For the current and next column\r\n        for(let xOffset = 0; Math.abs(xOffset) <= 1; xOffset += this.move.x) {\r\n\r\n            //Check if there\r\n            var block = this.brickHandler.checkCollision(\r\n                this.gpos.getAdd(\r\n                    new Vect(\r\n                        (this.move.x < 0 ? -1 : 0) + xOffset, \r\n                        1 - this.size.y)),\r\n                this.size.y + 2)\r\n\r\n            //If there is a blocking element return a block-value\r\n            if(block >= 0) {\r\n                return block * (Math.abs(xOffset) + 1)\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D) {\r\n\r\n        ctx.globalAlpha = 0.5;\r\n        ctx.strokeStyle = \"#F00\"\r\n        ctx.lineWidth = 4;\r\n        ctx.strokeRect(\r\n           -GMULTX, \r\n            GMULTY, \r\n            this.size.x * GMULTX, \r\n           -this.size.y * GMULTY);\r\n\r\n        ctx.translate(-this.spos.x, 0);\r\n        \r\n        ctx.fillStyle = this.move.x > 0 ? \"#FF0\" : \"#00F\"\r\n        ctx.fillRect(\r\n           -GMULTX, \r\n            GMULTY, \r\n            this.size.x * GMULTX, \r\n           -this.size.y * GMULTY);\r\n    }\r\n}\r\n"],
  "mappings": "AACA;AACA;AACA;AAHA,uCAWuC;AAAA,EAQnC,YAAY;AACR,UAAM,SAAQ;AANV,gBAAe;AAOnB,SAAK,OAAO,IAAI,KAAK,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK;AAC5D,SAAK,QAAQ,OAAO,SAAS;AAC7B,SAAK,OAAO,IAAI,KAAK,GAAG;AACxB,SAAK,iBAAiB;AAAA;AAAA,EAGnB;AAEH,SAAK,eAAe,KAAK,OAAO,IAAI,IAAI,gBAAgB,kBAAkB;AAAA;AAAA,EAGvE;AAGH,SAAK,KAAK,KAAK,KAAK,KAAK,IAAI,KAAK,QAAQ,SAAS;AAGnD,QAAI,KAAK,IAAI,KAAK,KAAK,KAAK;AACxB,gBAAU,KAAK,KAAK,KAAK,KAAK;AAE9B,WAAK,KAAK,KAAK,SAAS;AACxB,WAAK,KAAK,KAAK;AAEf,WAAK,iBAAiB;AAAA;AAG1B,QAAI,KAAK;AAGL,kBAAY,KAAK;AAGjB,UAAI,KAAK,KAAK,IAAI,IAAI,SAAS,QAC3B,KAAK,KAAK,IAAI,IAAI,SAAS,QAC3B,QAAQ,KAAK,QAAQ,KAAK,KAAK,IAAI;AAEnC,gBAAQ,IAAI;AACZ,aAAK,KAAK,KAAK;AACf,aAAK,KAAK,KAAK,KAAK,KAAK;AAAA;AAKzB,gBAAQ;AAAA,eAGC;AACD,oBAAQ,IAAI;AACZ,iBAAK,KAAK,KAAK;AACf;AAAA,eAGC;AACD,oBAAQ,IAAI;AACZ,iBAAK,KAAK,KAAK;AACf;AAAA,eAGC,KAAK,KAAK,IAAI;AACf,oBAAQ,IAAI;AACZ,iBAAK,KAAK,KAAK;AACf;AAAA,eAGC,KAAK,KAAK;AACX,oBAAQ,IAAI;AACZ;AAAA,eAGC,KAAK,KAAK,IAAI;AACf,oBAAQ,IAAI;AACZ,iBAAK,KAAK,KAAK;AACf;AAAA;AAAA;AAKZ,WAAK,iBAAiB;AAAA;AAAA;AAAA,EAKtB;AAGJ,uBAAkB,GAAG,KAAK,IAAI,YAAY,GAAG,WAAW,KAAK,KAAK;AAG9D,kBAAY,KAAK,aAAa,eAC1B,KAAK,KAAK,OACN,IAAI,KACC,MAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAC7B,IAAI,KAAK,KAAK,KACtB,KAAK,KAAK,IAAI;AAGlB,UAAG,SAAS;AACR,eAAO,QAAS,MAAK,IAAI,WAAW;AAAA;AAAA;AAI5C,WAAO;AAAA;AAAA,EAGJ;AAEH,QAAI,cAAc;AAClB,QAAI,cAAc;AAClB,QAAI,YAAY;AAChB,QAAI,WACD,CAAC,QACA,QACA,KAAK,KAAK,IAAI,QACf,CAAC,KAAK,KAAK,IAAI;AAElB,QAAI,UAAU,CAAC,KAAK,KAAK,GAAG;AAE5B,QAAI,YAAY,KAAK,KAAK,IAAI,IAAI,SAAS;AAC3C,QAAI,SACD,CAAC,QACA,QACA,KAAK,KAAK,IAAI,QACf,CAAC,KAAK,KAAK,IAAI;AAAA;AAAA;",
  "names": []
}
