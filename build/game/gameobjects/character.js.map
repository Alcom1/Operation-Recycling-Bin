{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\character.ts"],
  "sourcesContent": ["import Engine from \"engine/engine\";\r\nimport Scene from \"engine/scene/scene\";\r\nimport GameObject, { GameObjectParams } from \"engine/gameobjects/gameobject\";\r\nimport { BOUNDARY, getZIndex, GMULTX, GMULTY, round } from \"engine/utilities/math\";\r\nimport Vect, { Point } from \"engine/utilities/vect\";\r\nimport BrickHandler from \"./brickhandler\";\r\nimport Brick from \"./brick\";\r\nimport Cursor from \"./cursor\";\r\nimport SpriteCharacter, { SpriteCharacterParams } from \"./spritecharacter\";\r\n\r\nexport interface CharacterParams extends GameObjectParams {\r\n    height? : number;\r\n    speed? : number;\r\n    images : CharacterImageParams[];\r\n    imagesMisc : CharacterImageParams[];\r\n    animFrames : number;\r\n    animCount : number;\r\n}\r\n\r\nexport interface CharacterImageParams {\r\n    name : string;\r\n    extension : string;\r\n    offset : number;\r\n}\r\n\r\nexport interface CharacterImage {\r\n    image : HTMLImageElement;\r\n    offset : number;\r\n}\r\n\r\nexport default class Character extends GameObject {\r\n\r\n    private level!: Scene;\r\n    private speed: number;\r\n    protected _height: number;\r\n    public get height() { return this._height; }\r\n    protected move: Vect;\r\n    protected brickHandler!: BrickHandler;\r\n    private underBricks: Brick[] = [];\r\n    protected checkCollision: boolean;\r\n\r\n    protected segmentIndex = 0;\r\n    protected segments: SpriteCharacter[][] = [[]];\r\n    protected get segmentsCurr() : SpriteCharacter[] { return this.segments[this.segmentIndex] }\r\n\r\n    constructor(engine: Engine, params: CharacterParams) {\r\n        super(engine, params);\r\n        \r\n        this.speed = params.speed ?? 1;     //Default speed\r\n        this.move = new Vect(1, 0);         //Default move directions\r\n        this._height = params.height ?? 2;  //Default height for a character\r\n        this.checkCollision = true;\r\n\r\n        //Spawn sprite segments\r\n        for(let i = -1; i < 4; i++) {\r\n\r\n            //Generate segment\r\n            const segment = new SpriteCharacter(this.engine, {\r\n                ...params, \r\n                order : i, \r\n                width : GMULTX \r\n            } as SpriteCharacterParams);\r\n            this.segmentsCurr.push(segment);\r\n            \r\n            // Add segment game object to scene\r\n            this.parent.pushGO(segment);\r\n        }\r\n    }\r\n\r\n    public init(ctx: CanvasRenderingContext2D, scenes: Scene[]) {\r\n\r\n        // Get level.\r\n        const level = scenes.find(s => s.name == \"Level\");\r\n        if (!level) throw new Error(\"Can't find level\");\r\n        this.level = level;\r\n\r\n        // Get brickhandler for pressure checks\r\n        this.brickHandler = this.engine.tag.get(\"BrickHandler\", \"LevelInterface\")[0] as BrickHandler;\r\n    }\r\n\r\n    public update(dt: number) {\r\n\r\n        //Increment position by speed\r\n        this.spos.x += this.move.x * this.speed * GMULTX * dt;\r\n\r\n        //Step grid position further once subposition goes past a grid-unit\r\n        if (Math.abs(this.spos.x) > GMULTX) {\r\n\r\n            var dir = Math.sign(this.spos.x);\r\n\r\n            this.spos.x -= GMULTX * dir;\r\n            this.gpos.x += dir;\r\n\r\n\r\n            this.checkCollision = true;\r\n        }\r\n\r\n        //Check collision\r\n        if(this.checkCollision) {\r\n\r\n            this.handleCollision();\r\n            this.handleBricks();\r\n\r\n            this.segmentsCurr.forEach(s => s.updateSprite(this.gpos));\r\n            this.level.sortGO();\r\n\r\n            this.checkCollision = false;\r\n        }\r\n    }\r\n\r\n    private handleBricks() {\r\n\r\n        this.underBricks.forEach(b => b.pressure -= 1);\r\n\r\n        this.underBricks = this.brickHandler.checkCollisionRow(\r\n            this.gpos.getAdd({x : -1, y : 1}), \r\n            2);\r\n\r\n        this.underBricks.forEach(b => b.pressure += 1);\r\n        this.brickHandler.isPressured = true;\r\n    }\r\n\r\n    protected handleCollision() {\r\n\r\n    }\r\n\r\n    protected reverse() {\r\n        this.move.x *= -1;\r\n        this.gpos.x += this.move.x;\r\n        this.segmentsCurr.forEach(x => x.direction = this.move.x);\r\n    }\r\n}\r\n"],
  "mappings": "AAEA;AACA;AACA;AAIA;AARA,uCA8BuC;AAAA,EAenC,YAAY;AACR,UAAM,SAAQ;AARV,uBAAuB;AAGrB,wBAAe;AACf,oBAAgC,CAAC;AAMvC,SAAK,QAAQ,OAAO,SAAS;AAC7B,SAAK,OAAO,IAAI,KAAK,GAAG;AACxB,SAAK,UAAU,OAAO,UAAU;AAChC,SAAK,iBAAiB;AAGtB,iBAAY,IAAI,IAAI,GAAG;AAGnB,sBAAgB,IAAI,gBAAgB,KAAK,QAAQ;AAAA,WAC1C;AAAA,QACH,OAAQ;AAAA,QACR,OAAQ;AAAA;AAEZ,WAAK,aAAa,KAAK;AAGvB,WAAK,OAAO,OAAO;AAAA;AAAA;AAAA,MA9BhB;AAAW,WAAO,KAAK;AAAA;AAAA,MAQpB;AAAqC,WAAO,KAAK,SAAS,KAAK;AAAA;AAAA,EA0BtE;AAGH,kBAAc,OAAO,KAAK,OAAK,EAAE,QAAQ;AACzC,QAAI,CAAC;AAAO,YAAM,IAAI,MAAM;AAC5B,SAAK,QAAQ;AAGb,SAAK,eAAe,KAAK,OAAO,IAAI,IAAI,gBAAgB,kBAAkB;AAAA;AAAA,EAGvE;AAGH,SAAK,KAAK,KAAK,KAAK,KAAK,IAAI,KAAK,QAAQ,SAAS;AAGnD,QAAI,KAAK,IAAI,KAAK,KAAK,KAAK;AAExB,gBAAU,KAAK,KAAK,KAAK,KAAK;AAE9B,WAAK,KAAK,KAAK,SAAS;AACxB,WAAK,KAAK,KAAK;AAGf,WAAK,iBAAiB;AAAA;AAI1B,QAAG,KAAK;AAEJ,WAAK;AACL,WAAK;AAEL,WAAK,aAAa,QAAQ,OAAK,EAAE,aAAa,KAAK;AACnD,WAAK,MAAM;AAEX,WAAK,iBAAiB;AAAA;AAAA;AAAA,EAItB;AAEJ,SAAK,YAAY,QAAQ,OAAK,EAAE,YAAY;AAE5C,SAAK,cAAc,KAAK,aAAa,kBACjC,KAAK,KAAK,OAAO,CAAC,GAAI,IAAI,GAAI,KAC9B;AAEJ,SAAK,YAAY,QAAQ,OAAK,EAAE,YAAY;AAC5C,SAAK,aAAa,cAAc;AAAA;AAAA,EAG1B;AAAA;AAAA,EAIA;AACN,SAAK,KAAK,KAAK;AACf,SAAK,KAAK,KAAK,KAAK,KAAK;AACzB,SAAK,aAAa,QAAQ,OAAK,EAAE,YAAY,KAAK,KAAK;AAAA;AAAA;",
  "names": []
}
