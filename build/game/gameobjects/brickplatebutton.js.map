{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\brickplatebutton.ts"],
  "sourcesContent": ["import { Collider } from \"engine/modules/collision\";\r\nimport BrickPlate, { BrickPlateParams } from \"./brickplate\";\r\n\r\nconst brickButtonOverride = Object.freeze({\r\n    images : [\"brick_button_off\", \"brick_button_on\"],\r\n    width : 2\r\n});\r\n\r\nexport default class BrickPlateButton extends BrickPlate {\r\n    \r\n    plates: BrickPlate[] = [];\r\n    private isLock : boolean = false;   //If this button is locked and can't be flipped again\r\n    private isLeft : boolean = false;   //If the presser of this button left and it *can* be flipped again\r\n\r\n    constructor(params: BrickPlateParams) {\r\n        super(Object.assign(params, brickButtonOverride));\r\n    }\r\n\r\n    public init() {\r\n\r\n        //Get plates affected by this button (also includes self?)\r\n        this.plates = (this.engine.tag.get(\r\n            \"BrickPlate\", \r\n            \"Level\") as BrickPlate[]).filter(p => p.circuit == this.circuit);\r\n    }\r\n\r\n    //Update timer\r\n    public update(dt: number) {\r\n\r\n        //Unlock the button after the presser leaves\r\n        if(this.isLeft) {\r\n            this.isLock = false;\r\n        }\r\n\r\n        //Setup a check for if the presser left while this button is locked\r\n        if(this.isLock) {\r\n            this.isLeft = true;\r\n        }\r\n    }\r\n\r\n    //Get hazard and passive colliders of this brick.\r\n    public getColliders() : Collider[] {\r\n\r\n        //Combine with passive collider from base class\r\n        return super.getColliders().concat([{\r\n            mask : 0b10000000,  //Button\r\n            min : this.gpos.getAdd({ x : 0,          y : -1}),\r\n            max : this.gpos.getAdd({ x : this.width, y :  0}) \r\n        }]);\r\n    }\r\n    \r\n    //Flip\r\n    public resolveCollision(mask : number) {\r\n\r\n        //Turn off\r\n        if (mask & 0b10000000) {\r\n\r\n            //Left check failed, presser is still here\r\n            this.isLeft = false;\r\n\r\n            if(!this.isLock) {\r\n                var temp = !this.isOn;                      //Store opposite of this button\r\n                this.plates.forEach(p => p.setOnOff(temp)); //Set all other plates in this circuit\r\n                this.isLock = true;                         //Lock the button to prevent repeat presses\r\n            }\r\n        }\r\n    }\r\n}"],
  "mappings": "AACA;AAEA,MAAM,sBAAsB,OAAO,OAAO;AAAA,EACtC,QAAS,CAAC,oBAAoB;AAAA,EAC9B,OAAQ;AAAA;AALZ,8CAQ8C;AAAA,EAM1C;AACI,UAAM,OAAO,OAAO,QAAQ;AALhC,kBAAuB;AACf,kBAAmB;AACnB,kBAAmB;AAAA;AAAA,EAMpB;AAGH,SAAK,SAAU,KAAK,OAAO,IAAI,IAC3B,cACA,SAA0B,OAAO,OAAK,EAAE,WAAW,KAAK;AAAA;AAAA,EAIzD;AAGH,QAAG,KAAK;AACJ,WAAK,SAAS;AAAA;AAIlB,QAAG,KAAK;AACJ,WAAK,SAAS;AAAA;AAAA;AAAA,EAKf;AAGH,WAAO,MAAM,eAAe,OAAO,CAAC;AAAA,MAChC,MAAO;AAAA,MACP,KAAM,KAAK,KAAK,OAAO,CAAE,GAAI,GAAY,GAAI;AAAA,MAC7C,KAAM,KAAK,KAAK,OAAO,CAAE,GAAI,KAAK,OAAO,GAAK;AAAA;AAAA;AAAA,EAK/C;AAGH,QAAI,OAAO;AAGP,WAAK,SAAS;AAEd,UAAG,CAAC,KAAK;AACL,mBAAW,CAAC,KAAK;AACjB,aAAK,OAAO,QAAQ,OAAK,EAAE,SAAS;AACpC,aAAK,SAAS;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
