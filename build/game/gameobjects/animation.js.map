{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\animation.ts"],
  "sourcesContent": ["import Engine from \"engine/engine\";\r\nimport GameObject, { GameObjectParams } from \"engine/gameobjects/gameobject\";\r\nimport { floor, getZIndex, GMULTY, OPPOSITE_DIRS } from \"engine/utilities/math\";\r\nimport Vect, { Point } from \"engine/utilities/vect\";\r\n\r\nexport interface OffsetImageExpandedParams {\r\n    name : string;\r\n    extension : string;\r\n    offsetX : number;\r\n}\r\n\r\nexport interface OffsetImageParams {\r\n    name : string;\r\n    extension? : string;\r\n    offsetX : number;\r\n}\r\n\r\nexport interface OffsetImage {\r\n    image : HTMLImageElement;\r\n    offsetX : number;\r\n}\r\n\r\nexport interface AnimationParams extends GameObjectParams {\r\n\r\n    images : OffsetImageParams[];\r\n    speed? : number;\r\n    loop? : boolean;\r\n    framesSize? : number;\r\n    gposOffset? : Point;\r\n\r\n    frameCount : number;\r\n    animsCount? : number;\r\n    sliceIndex? : number;\r\n}\r\n\r\n/** Animated image gameobject */\r\nexport default class Animat extends GameObject {\r\n\r\n    //Set in constructor\r\n    private gposOffset : Point;\r\n    private images : OffsetImage[] = [];\r\n    private speed : number;\r\n    private loop : boolean;\r\n    private framesSize? : number;\r\n    private frameCount : number;\r\n    private animsCount : number;\r\n    private sliceIndex? : number;\r\n\r\n    //Set in init\r\n    private fullSize : Point = { x : 0, y : 0 };\r\n\r\n    //Set here\r\n    private timer : number = 0;\r\n    private imageIndex: number = 0;\r\n    private animsIndex : number = 0;\r\n\r\n    constructor(engine : Engine, params : AnimationParams) {\r\n        super(engine, params);\r\n\r\n        this.speed = params.speed ?? 1;\r\n        this.loop = params.loop ?? true;\r\n        this.framesSize = params.framesSize;\r\n        this.gposOffset = params.gposOffset ?? { x : 0, y : 0 }\r\n\r\n        switch(params.images.length) {\r\n\r\n            //No images (why?)\r\n            case 0:\r\n                break;\r\n\r\n            //Single images\r\n            case 1:\r\n                this.images[0] = this.getImage(params.images[0]);\r\n            \r\n            //Pair of images with opposing directions\r\n            case 2:\r\n                this.imageIndex = 1;\r\n                OPPOSITE_DIRS.forEach(d => {\r\n                    const index = Math.max(d, 0);\r\n                    if(params.images[index]) {\r\n                        this.images[d] = this.getImage(params.images[index]);\r\n                    }\r\n                });\r\n\r\n            //Many images\r\n            default:\r\n                params.images.forEach(i => this.images.push(this.getImage(i)));\r\n        }\r\n\r\n        this.frameCount = params.frameCount;\r\n        this.animsCount = params.animsCount ?? 1;\r\n        this.sliceIndex = params.sliceIndex;\r\n\r\n\r\n        this.setZIndex();\r\n    }\r\n\r\n    private getImage(params : OffsetImageParams) : OffsetImage {\r\n        return {\r\n            image : this.engine.library.getImage(\r\n                params.name, \r\n                params.extension),\r\n            offsetX : params.offsetX ?? 0\r\n        }\r\n    }\r\n\r\n    public init(ctx : CanvasRenderingContext2D) {\r\n\r\n        this.fullSize = {\r\n            x : this.images[this.imageIndex].image.width,\r\n            y : this.images[this.imageIndex].image.height\r\n        }\r\n    }\r\n\r\n    public update(dt: number) {\r\n\r\n        //For all moving animations\r\n        if(this.speed > 0) {\r\n\r\n            //Increment timer by delta-time\r\n            this.timer += dt;\r\n    \r\n            if(this.loop && this.timer > 1 / this.speed) {\r\n                this.timer -= 1 / this.speed;\r\n            }\r\n        }\r\n    }\r\n\r\n    public updateSprite(gpos : Vect) {\r\n\r\n        this.timer = 0;\r\n        this.gpos = gpos.getAdd(this.gposOffset);\r\n        this.animsIndex = ++this.animsIndex % this.animsCount;\r\n        this.setZIndex();\r\n    }\r\n\r\n    private setZIndex() {\r\n\r\n        this.zIndex = getZIndex(\r\n            this.gpos,\r\n            this.getSliceModifier())   \r\n    }\r\n\r\n    //Magic Z-index handling (it keeps getting worse!)\r\n    private getSliceModifier() : number {\r\n\r\n        if(this.sliceIndex == null) {\r\n            return 40;\r\n        }\r\n        else if(this.sliceIndex < 1) {\r\n            return 310;\r\n        }\r\n        else {\r\n            return 29;\r\n        }\r\n    }\r\n\r\n    public setImageIndex(index : number) {\r\n        this.imageIndex = index;\r\n    }\r\n\r\n    public draw(ctx : CanvasRenderingContext2D) {\r\n\r\n        const width = this.framesSize ?? 0;\r\n        const image = this.images[this.imageIndex];\r\n        const widthSlice = width * (this.sliceIndex ?? 0);\r\n\r\n        ctx.drawImage(\r\n            //Greater image\r\n            image.image,                    \r\n\r\n            //Slice position & size \r\n            widthSlice +                    //Move segment forward based on which slice this is.\r\n            image.offsetX +                 //Move segment forward based on the X-offset of the current image  \r\n            floor((                         //Move segment forward to the current animation and current frame\r\n                this.animsIndex +           //Move segment forward to the current animation\r\n                Math.min(                   //Get current frame based on the timer and speed of the animation\r\n                    this.timer *        \r\n                    this.speed,         \r\n                    1 - Number.EPSILON)) *  //Subtract epsilon to prevent grabbing the next frame at max value\r\n                this.fullSize.x / this.animsCount,             \r\n                this.fullSize.x / this.frameCount),\r\n            0,  \r\n            width,  \r\n            this.fullSize.y,    \r\n\r\n            //Greater image position & size\r\n            widthSlice,                     //Move segment forward based on which slice this is\r\n            GMULTY - this.fullSize.y,\r\n            width,\r\n            this.fullSize.y);\r\n\r\n        // ctx.globalAlpha = 0.5;\r\n        // ctx.strokeStyle = \"#F00\"\r\n        // ctx.lineWidth = 4;\r\n        // ctx.strokeRect(\r\n        //     width * this.sliceIndex, \r\n        //     GMULTY, \r\n        //     width, \r\n        //    -this.fullSize.y);\r\n    }\r\n}"],
  "mappings": "AACA;AACA;AAFA,oCAoCoC;AAAA,EAoBhC,YAAY;AACR,UAAM,SAAQ;AAjBV,kBAAyB;AASzB,oBAAmB,CAAE,GAAI,GAAG,GAAI;AAGhC,iBAAiB;AACjB,sBAAqB;AACrB,sBAAsB;AAK1B,SAAK,QAAQ,OAAO,SAAS;AAC7B,SAAK,OAAO,OAAO,QAAQ;AAC3B,SAAK,aAAa,OAAO;AACzB,SAAK,aAAa,OAAO,cAAc,CAAE,GAAI,GAAG,GAAI;AAEpD,YAAO,OAAO,OAAO;AAAA,WAGZ;AACD;AAAA,WAGC;AACD,aAAK,OAAO,KAAK,KAAK,SAAS,OAAO,OAAO;AAAA,WAG5C;AACD,aAAK,aAAa;AAClB,sBAAc,QAAQ;AAClB,wBAAc,KAAK,IAAI,GAAG;AAC1B,cAAG,OAAO,OAAO;AACb,iBAAK,OAAO,KAAK,KAAK,SAAS,OAAO,OAAO;AAAA;AAAA;AAAA;AAMrD,eAAO,OAAO,QAAQ,OAAK,KAAK,OAAO,KAAK,KAAK,SAAS;AAAA;AAGlE,SAAK,aAAa,OAAO;AACzB,SAAK,aAAa,OAAO,cAAc;AACvC,SAAK,aAAa,OAAO;AAGzB,SAAK;AAAA;AAAA,EAGD;AACJ,WAAO;AAAA,MACH,OAAQ,KAAK,OAAO,QAAQ,SACxB,OAAO,MACP,OAAO;AAAA,MACX,SAAU,OAAO,WAAW;AAAA;AAAA;AAAA,EAI7B;AAEH,SAAK,WAAW;AAAA,MACZ,GAAI,KAAK,OAAO,KAAK,YAAY,MAAM;AAAA,MACvC,GAAI,KAAK,OAAO,KAAK,YAAY,MAAM;AAAA;AAAA;AAAA,EAIxC;AAGH,QAAG,KAAK,QAAQ;AAGZ,WAAK,SAAS;AAEd,UAAG,KAAK,QAAQ,KAAK,QAAQ,IAAI,KAAK;AAClC,aAAK,SAAS,IAAI,KAAK;AAAA;AAAA;AAAA;AAAA,EAK5B;AAEH,SAAK,QAAQ;AACb,SAAK,OAAO,KAAK,OAAO,KAAK;AAC7B,SAAK,aAAa,EAAE,KAAK,aAAa,KAAK;AAC3C,SAAK;AAAA;AAAA,EAGD;AAEJ,SAAK,SAAS,UACV,KAAK,MACL,KAAK;AAAA;AAAA,EAIL;AAEJ,QAAG,KAAK,cAAc;AAClB,aAAO;AAAA,eAEH,KAAK,aAAa;AACtB,aAAO;AAAA;AAGP,aAAO;AAAA;AAAA;AAAA,EAIR;AACH,SAAK,aAAa;AAAA;AAAA,EAGf;AAEH,kBAAc,KAAK,cAAc;AACjC,kBAAc,KAAK,OAAO,KAAK;AAC/B,uBAAmB,QAAS,MAAK,cAAc;AAE/C,QAAI,UAEA,MAAM,OAGN,aACA,MAAM,UACN,MACI,MAAK,aACL,KAAK,IACD,KAAK,QACL,KAAK,OACL,IAAI,OAAO,YACf,KAAK,SAAS,IAAI,KAAK,YACvB,KAAK,SAAS,IAAI,KAAK,aAC3B,GACA,OACA,KAAK,SAAS,GAGd,YACA,SAAS,KAAK,SAAS,GACvB,OACA,KAAK,SAAS;AAAA;AAAA;",
  "names": []
}
