{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\collisionhandler.ts"],
  "sourcesContent": ["import Engine from \"engine/engine\";\r\nimport GameObject, { GameObjectParams } from \"engine/gameobjects/gameobject\";\r\nimport { col1D } from \"engine/utilities/math\";\r\nimport Vect from \"engine/utilities/vect\";\r\nimport BrickHandler from \"./brickhandler\";\r\nimport Character from \"./character\";\r\n\r\n/** Single image gameobject */\r\nexport default class CollisionHandler extends GameObject {\r\n\r\n    private brickHandler!: BrickHandler;\r\n    private characters: Character[] = [];\r\n\r\n    constructor(engine: Engine, params: GameObjectParams) {\r\n        super(engine, params);\r\n    }\r\n\r\n    public init(ctx: CanvasRenderingContext2D) {\r\n        \r\n        const brickHandler = this.engine.tag.get(\"BrickHandler\", \"LevelInterface\")[0];\r\n        if (!brickHandler) throw new Error(\"Can't find BrickHandler\");\r\n        this.brickHandler = brickHandler as BrickHandler;\r\n\r\n        const characters = this.engine.tag.get(\"Character\", \"Level\");\r\n        this.characters = characters as Character[];\r\n    }\r\n\r\n    /** Check collisons for a vertically-looping range and return a bitmask */\r\n    private checkCollisionRange(pos: Vect, start: number, final: number, height: number, dir: number): number {\r\n\r\n        return this.brickHandler.checkCollisionRange(pos, start, final, height, dir);\r\n    }\r\n}"],
  "mappings": "AACA;AADA,8CAQ8C;AAAA,EAK1C,YAAY;AACR,UAAM,SAAQ;AAHV,sBAA0B;AAAA;AAAA,EAM3B;AAEH,yBAAqB,KAAK,OAAO,IAAI,IAAI,gBAAgB,kBAAkB;AAC3E,QAAI,CAAC;AAAc,YAAM,IAAI,MAAM;AACnC,SAAK,eAAe;AAEpB,uBAAmB,KAAK,OAAO,IAAI,IAAI,aAAa;AACpD,SAAK,aAAa;AAAA;AAAA,EAId;AAEJ,WAAO,KAAK,aAAa,oBAAoB,KAAK,OAAO,OAAO,QAAQ;AAAA;AAAA;",
  "names": []
}
