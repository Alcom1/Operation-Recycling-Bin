{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\game\\gameobjects\\collisionhandler.ts"],
  "sourcesContent": ["import GameObject from \"engine/gameobjects/gameobject\";\r\nimport { colRectRectCorners, colRectRectCornerSize } from \"engine/utilities/math\";\r\nimport { Point } from \"engine/utilities/vect\";\r\nimport Brick from \"./brick\";\r\nimport Character from \"./character\";\r\n\r\ninterface CollisionBox {\r\n    min: Point,\r\n    max: Point\r\n}\r\n\r\nexport default class CollisionHandler extends GameObject {\r\n\r\n    private characters!: Character[];\r\n    private obstacles!: Brick[];\r\n\r\n    public init(ctx: CanvasRenderingContext2D) {\r\n        \r\n        this.characters = this.engine.tag.get([\"CharacterBin\", \"CharacterBot\"], \"Level\") as Character[];\r\n        this.obstacles = this.engine.tag.get([\"Brick\"], \"Level\").filter(b => !b.tags.includes(\"BrickNormal\")) as Brick[];\r\n    }\r\n\r\n    public getCollisionBoxes(min : Point, max : Point) : CollisionBox[] {\r\n\r\n        return this.getCBsFromCharacters(min, max).concat(\r\n               this.getCBsFromObstacles(min, max, 1, 2));\r\n    }\r\n\r\n    private getCBsFromObstacles(min : Point, max : Point, yUp : number, yDown : number) : CollisionBox[] {\r\n\r\n        const ret : CollisionBox[] = [];\r\n\r\n        //For all obstacles\r\n        this.obstacles.forEach(obstacle => {\r\n\r\n            //Get collider for that obstacle\r\n            const c = { \r\n                min : obstacle.gpos.getAdd({ x : 0,              y : -yUp}),\r\n                max : obstacle.gpos.getAdd({ x : obstacle.width, y :  yDown}) \r\n            }\r\n\r\n            //If that collider is in the given bounding box, it will be returned\r\n            if(colRectRectCorners(min, max, c.min, c.max)) {\r\n                ret.push(c);\r\n            }\r\n        })\r\n\r\n        return ret;\r\n    }\r\n\r\n    private getCBsFromCharacters(min : Point, max : Point) : CollisionBox[] {\r\n\r\n        const ret : CollisionBox[] = [];\r\n\r\n        //For all active characters\r\n        this.characters.filter(c => c.isActive).forEach(character => {\r\n\r\n            //Get collider for that character\r\n            const c = { \r\n                min : character.gpos.getAdd({ x : -1, y : 1 - character.height}), \r\n                max : character.gpos.getAdd({ x :  1, y : 1}) \r\n            }\r\n\r\n            //If that collider is in the given bounding box, it will be returned\r\n            if(colRectRectCorners(min, max, c.min, c.max)) {\r\n                ret.push(c);\r\n            }\r\n        })\r\n\r\n        return ret;\r\n    }\r\n}\r\n"],
  "mappings": "AAAA;AACA;AADA,8CAW8C;AAAA,EAKnC,KAAK;AAER,SAAK,aAAa,KAAK,OAAO,IAAI,IAAI,CAAC,gBAAgB,iBAAiB;AACxE,SAAK,YAAY,KAAK,OAAO,IAAI,IAAI,CAAC,UAAU,SAAS,OAAO,OAAK,CAAC,EAAE,KAAK,SAAS;AAAA;AAAA,EAGnF;AAEH,WAAO,KAAK,qBAAqB,KAAK,KAAK,OACpC,KAAK,oBAAoB,KAAK,KAAK,GAAG;AAAA;AAAA,EAGzC;AAEJ,gBAA6B;AAG7B,SAAK,UAAU,QAAQ;AAGnB,gBAAU;AAAA,QACN,KAAM,SAAS,KAAK,OAAO,CAAE,GAAI,GAAgB,GAAI,CAAC;AAAA,QACtD,KAAM,SAAS,KAAK,OAAO,CAAE,GAAI,SAAS,OAAO,GAAK;AAAA;AAI1D,UAAG,mBAAmB,KAAK,KAAK,EAAE,KAAK,EAAE;AACrC,YAAI,KAAK;AAAA;AAAA;AAIjB,WAAO;AAAA;AAAA,EAGH;AAEJ,gBAA6B;AAG7B,SAAK,WAAW,OAAO,OAAK,EAAE,UAAU,QAAQ;AAG5C,gBAAU;AAAA,QACN,KAAM,WAAU,KAAK,OAAO,CAAE,GAAI,IAAI,GAAI,IAAI,WAAU;AAAA,QACxD,KAAM,WAAU,KAAK,OAAO,CAAE,GAAK,GAAG,GAAI;AAAA;AAI9C,UAAG,mBAAmB,KAAK,KAAK,EAAE,KAAK,EAAE;AACrC,YAAI,KAAK;AAAA;AAAA;AAIjB,WAAO;AAAA;AAAA;",
  "names": []
}
