{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\engine\\gameobjects\\gameobject.ts"],
  "sourcesContent": ["import Vect, { Point } from \"engine/utilities/vect\";\r\nimport Scene from \"engine/scene/scene\";\r\nimport Engine from \"engine/engine\";\r\nimport { Collider } from \"engine/modules/collision\";\r\nimport { getZIndex } from \"engine/utilities/math\";\r\n\r\nexport interface GameObjectParams {\r\n    engine: Engine;\r\n    position?: Point;\r\n    subPosition?: Point;\r\n    zIndex?: number;\r\n    scene: Scene;\r\n    name: string;\r\n    tags?: [string];\r\n    isActive?: boolean;\r\n}\r\n\r\n/** Base game object */\r\nexport default class GameObject {\r\n\r\n    /** Grid position */\r\n    public gpos: Vect;\r\n    /** Sub-position */\r\n    public spos: Vect;\r\n    protected engine: Engine;\r\n    public tags: string[];\r\n    public parent: Scene;\r\n    public isActive: Boolean;\r\n\r\n    constructor(params: GameObjectParams) {\r\n        this.gpos = new Vect(params.position?.x ?? 0, params.position?.y ?? 0);\r\n        this.spos = new Vect(params.subPosition?.x ?? 0, params.subPosition?.y ?? 0);\r\n        this.tags = params.tags ?? [params.name];\r\n        this.parent = params.scene;\r\n        this.engine = params.engine;\r\n        this.isActive = params.isActive ?? true;\r\n    }\r\n\r\n    /**\r\n     * Initialize a game object after its scene is loaded.\r\n     * @param ctx\r\n     * @param scenes\r\n     */\r\n    public init(ctx: CanvasRenderingContext2D) {}\r\n\r\n    /**\r\n     * Compare two objects, return true if they are the same\r\n     * @param gameObject GameObject to compare against\r\n     * @returns Whether or not the game objects are the same\r\n     */\r\n    public compare(gameObject: GameObject): boolean {\r\n        //Default compare uses grid positions\r\n        return gameObject.gpos.x == this.gpos.x && gameObject.gpos.y == this.gpos.y;\r\n    }\r\n\r\n    /**\r\n     * Game object update\r\n     * @param dt Delta time\r\n     */\r\n    public hasTag(tag: string): boolean {\r\n        return this.tags.some(t => t === tag);\r\n    }\r\n\r\n    /**\r\n     * Get all colliders for this game object\r\n     */\r\n    public getColliders() : Collider[] {\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Get the current z-index of this game object\r\n     */\r\n    public getGOZIndex() : number {\r\n        return getZIndex(this.gpos);\r\n    }\r\n\r\n    /**\r\n     * Resolve collision for this game object\r\n     */\r\n    public resolveCollision(mask : number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Game object update\r\n     * @param dt Delta time\r\n     */\r\n    public update(dt: number) {}\r\n\r\n    /**\r\n     * Game object draw\r\n     * @param ctx\r\n     */\r\n    public draw(ctx: CanvasRenderingContext2D) {}\r\n\r\n    /**\r\n     * Latter game object draw\r\n     * @param ctx\r\n     */\r\n    public superDraw(ctx: CanvasRenderingContext2D) {}\r\n}\r\n"],
  "mappings": "AAAA;AAIA;AAJA;AAAA,EA6BI,YAAY;AACR,SAAK,OAAO,IAAI,KAAK,OAAO,UAAU,KAAK,GAAG,OAAO,UAAU,KAAK;AACpE,SAAK,OAAO,IAAI,KAAK,OAAO,aAAa,KAAK,GAAG,OAAO,aAAa,KAAK;AAC1E,SAAK,OAAO,OAAO,QAAQ,CAAC,OAAO;AACnC,SAAK,SAAS,OAAO;AACrB,SAAK,SAAS,OAAO;AACrB,SAAK,WAAW,OAAO,YAAY;AAAA;AAAA,EAQhC;AAAA;AAAA,EAOA;AAEH,WAAO,WAAW,KAAK,KAAK,KAAK,KAAK,KAAK,WAAW,KAAK,KAAK,KAAK,KAAK;AAAA;AAAA,EAOvE;AACH,WAAO,KAAK,KAAK,KAAK,OAAK,MAAM;AAAA;AAAA,EAM9B;AACH,WAAO;AAAA;AAAA,EAMJ;AACH,WAAO,UAAU,KAAK;AAAA;AAAA,EAMnB;AAAA;AAAA,EAQA;AAAA;AAAA,EAMA;AAAA;AAAA,EAMA;AAAA;AAAA;",
  "names": []
}
