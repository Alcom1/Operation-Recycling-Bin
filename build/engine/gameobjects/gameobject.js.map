{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\engine\\gameobjects\\gameobject.ts"],
  "sourcesContent": ["import Vect, { Point } from \"engine/utilities/vect\";\r\nimport Scene from \"engine/scene/scene\";\r\nimport Engine from \"engine/engine\";\r\nimport { Collider } from \"engine/modules/collision\";\r\nimport { Faction } from \"engine/utilities/math\";\r\n\r\nexport interface Collision {\r\n    other : GameObject;\r\n    mask : number;\r\n}\r\n\r\nexport interface GameObjectParams {\r\n    engine: Engine;\r\n    position?: Point;\r\n    subPosition?: Point;\r\n    zIndex?: number;\r\n    zNoCompare?: boolean;\r\n    scene: Scene;\r\n    name: string;\r\n    tags?: [string];\r\n    faction? : Faction;\r\n    isActive?: boolean;\r\n    isDebug: boolean;\r\n}\r\n\r\n/** Base game object */\r\nexport default class GameObject {\r\n\r\n    /** Rand UUID generated upon instantiation */\r\n    private _id = (<any>crypto).randomUUID();\r\n    public get id() : boolean { return this._id; }\r\n\r\n    /** Grid position */\r\n    public gpos: Vect;\r\n\r\n    /** Sub-position * */\r\n    public spos: Vect;\r\n\r\n    /** Engine access */\r\n    protected engine: Engine;\r\n\r\n    /** Tags to reference this and similar game objects */\r\n    public tags: string[];\r\n\r\n    /** Parent scene of this game object*/\r\n    public parent: Scene;\r\n\r\n    /** If this is an active game object */\r\n    public isActive: Boolean;\r\n\r\n    /** If this game object is in a debug state */\r\n    public isDebug: Boolean;\r\n\r\n    /** Stored collisions to be processed */\r\n    private collisions: Collision[] = [];\r\n\r\n    /**  */\r\n    protected _faction: Faction;\r\n    public get faction(): Faction { return this._faction; };\r\n\r\n    /** z-index with get/setters */\r\n    protected _zIndex : number;\r\n    public get zIndex() : number { return this._zIndex; }\r\n    protected _zNoCompare : boolean;\r\n    public get zNoCompare() : boolean { return this._zNoCompare; }\r\n    public set zIndex(value : number) { this._zIndex = value; }\r\n    public get zpos() : Vect { return this.gpos; }\r\n    public get zState() : Boolean { return this.isActive; }\r\n    public get zSize() : Point { return {x : 1, y : 1}; }\r\n    public get zLayer() : Number { return 0; }\r\n\r\n    /** Constructor */\r\n    constructor(params: GameObjectParams) {\r\n        this.gpos = new Vect(params.position?.x ?? 0, params.position?.y ?? 0);\r\n        this.spos = new Vect(params.subPosition?.x ?? 0, params.subPosition?.y ?? 0);\r\n        this.tags = params.tags ?? [params.name];\r\n        this.parent = params.scene;\r\n        this.engine = params.engine;\r\n        this._faction = params.faction ?? Faction.NEUTRAL;\r\n        this.isActive = params.isActive ?? true;\r\n        this.isDebug = params.isDebug ?? false;\r\n        this._zIndex = params.zIndex ?? 0;\r\n        this._zNoCompare = params.zNoCompare ?? false;\r\n    }\r\n\r\n    /** \r\n     * Initialize a game object after its scene is loaded.\r\n     * @param ctx\r\n     * @param scenes\r\n    */\r\n    public init(ctx: CanvasRenderingContext2D) {}\r\n\r\n    /** \r\n     * Compare two objects, return true if they are the same\r\n     * @param gameObject GameObject to compare against\r\n     * @returns Whether or not the game objects are the same\r\n    */\r\n    public compare(gameObject: GameObject): boolean {\r\n        // Default compare uses grid positions\r\n        return gameObject.gpos.x == this.gpos.x && gameObject.gpos.y == this.gpos.y;\r\n    }\r\n\r\n    /** \r\n     * If this game object has a specific tag\r\n    */\r\n    public hasTag(tag: string): boolean {\r\n        return this.tags.some(t => t === tag);\r\n    }\r\n\r\n    /** \r\n     * Update positions for collisions step\r\n    */\r\n     public updateSync(counter : number, loopLength : number) {\r\n    }\r\n    \r\n    /** \r\n     * Game object update\r\n     * @param dt Delta time\r\n    */\r\n    public update(dt: number) {}\r\n\r\n    /** \r\n     * Game object draw\r\n     * @param ctx\r\n    */\r\n    public draw(ctx: CanvasRenderingContext2D) {}\r\n\r\n    /** \r\n     * Latter game object draw\r\n     * @param ctx\r\n    */\r\n    public superDraw(ctx: CanvasRenderingContext2D) {}\r\n\r\n    /** \r\n     * Get all colliders for this game object\r\n    */\r\n    public getColliders() : Collider[] {\r\n        return [];\r\n    }\r\n\r\n    /** \r\n     * Set collision to be resolved\r\n    */\r\n    public setCollision(mask : number, other : GameObject) {\r\n\r\n        this.collisions.push({\r\n            mask : mask,\r\n            other : other\r\n        });\r\n    }    \r\n\r\n    /** \r\n     * Resolve and clear all collisions\r\n    */\r\n    public resolveClearCollisions() {\r\n\r\n        this.resolveCollisions(this.collisions);\r\n        this.collisions = [];\r\n    }\r\n\r\n    /** \r\n     * Resolve all collisions\r\n    */\r\n    protected resolveCollisions(collisions : Collision[]) {\r\n\r\n        collisions.forEach(c => this.resolveCollision(c.mask, c.other));\r\n    }\r\n\r\n    /** \r\n     * Resolve collision for this game object\r\n    */\r\n    protected resolveCollision(mask : number, other : GameObject) {\r\n\r\n    }\r\n}\r\n"],
  "mappings": "AAAA;AAIA;AAJA;AAAA,EAwEI,YAAY;AA3CJ,eAAY,OAAQ;AAyBpB,sBAA0B;AAmB9B,SAAK,OAAO,IAAI,KAAK,OAAO,UAAU,KAAK,GAAG,OAAO,UAAU,KAAK;AACpE,SAAK,OAAO,IAAI,KAAK,OAAO,aAAa,KAAK,GAAG,OAAO,aAAa,KAAK;AAC1E,SAAK,OAAO,OAAO,QAAQ,CAAC,OAAO;AACnC,SAAK,SAAS,OAAO;AACrB,SAAK,SAAS,OAAO;AACrB,SAAK,WAAW,OAAO,WAAW,QAAQ;AAC1C,SAAK,WAAW,OAAO,YAAY;AACnC,SAAK,UAAU,OAAO,WAAW;AACjC,SAAK,UAAU,OAAO,UAAU;AAChC,SAAK,cAAc,OAAO,cAAc;AAAA;AAAA,MApDjC;AAAiB,WAAO,KAAK;AAAA;AAAA,MA4B7B;AAAqB,WAAO,KAAK;AAAA;AAAA,MAIjC;AAAoB,WAAO,KAAK;AAAA;AAAA,MAEhC;AAAyB,WAAO,KAAK;AAAA;AAAA,MACrC;AAAyB,SAAK,UAAU;AAAA;AAAA,MACxC;AAAgB,WAAO,KAAK;AAAA;AAAA,MAC5B;AAAqB,WAAO,KAAK;AAAA;AAAA,MACjC;AAAkB,WAAO,CAAC,GAAI,GAAG,GAAI;AAAA;AAAA,MACrC;AAAoB,WAAO;AAAA;AAAA,EAqB/B;AAAA;AAAA,EAOA;AAEH,WAAO,WAAW,KAAK,KAAK,KAAK,KAAK,KAAK,WAAW,KAAK,KAAK,KAAK,KAAK;AAAA;AAAA,EAMvE;AACH,WAAO,KAAK,KAAK,KAAK,OAAK,MAAM;AAAA;AAAA,EAM7B;AAAA;AAAA,EAOD;AAAA;AAAA,EAMA;AAAA;AAAA,EAMA;AAAA;AAAA,EAKA;AACH,WAAO;AAAA;AAAA,EAMJ;AAEH,SAAK,WAAW,KAAK;AAAA,MACjB;AAAA,MACA;AAAA;AAAA;AAAA,EAOD;AAEH,SAAK,kBAAkB,KAAK;AAC5B,SAAK,aAAa;AAAA;AAAA,EAMZ;AAEN,eAAW,QAAQ,OAAK,KAAK,iBAAiB,EAAE,MAAM,EAAE;AAAA;AAAA,EAMlD;AAAA;AAAA;",
  "names": []
}
