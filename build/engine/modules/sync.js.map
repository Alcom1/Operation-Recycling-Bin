{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\engine\\modules\\sync.ts"],
  "sourcesContent": ["import GameObject from \"engine/gameobjects/gameobject\";\r\nimport Scene from \"engine/scene/scene\";\r\nimport { colRectRectCorners, GMULTX, GMULTY } from \"engine/utilities/math\";\r\nimport Vect, { Point } from \"engine/utilities/vect\";\r\n\r\nexport interface Collider {\r\n    mask : number,\r\n    min : Point,\r\n    max : Point,\r\n    isSub? : Boolean\r\n}\r\n\r\nexport enum StepType {\r\n    START,\r\n    SYNC\r\n}\r\n\r\nexport interface Step {\r\n    stepType : StepType,\r\n    counter : number\r\n}\r\n\r\ninterface SyncScene {\r\n    name: string;\r\n    gameObjects: GameObject[];\r\n}\r\n\r\n/** Module that handles tags and game objects grouped by tag. */\r\nexport default class SyncModule {\r\n    \r\n    private scenes  : SyncScene[] = [];\r\n    private counter : number = 0;\r\n\r\n    /** \r\n    * @param physicsPerSecond Number of physics checks per second\r\n    */\r\n    constructor(private physicsPerSecond = 15) {\r\n        \r\n    }\r\n\r\n    public pushGOs(sceneName : string, sceneObjects : GameObject[]) {\r\n\r\n        const gameObjects : GameObject[] = [];\r\n\r\n        // Assign all game objects with colliders in this scene as passive or normal.\r\n        sceneObjects.forEach(go => {\r\n            gameObjects.push(go);\r\n        });\r\n\r\n        // Only add scene if it has collidables\r\n        if (gameObjects.length > 0) {\r\n\r\n            this.scenes.push({\r\n                name : sceneName,\r\n                gameObjects: gameObjects\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Update - check and trigger collisions for all game objects in all scenes */\r\n    public update() {\r\n\r\n        //Increment counter for next update\r\n        this.counter++;\r\n\r\n        // Do nothing if there are no scenes, stops updates before scenes load, stops early stutter\r\n        if (this.scenes.length == 0) {\r\n            return;\r\n        }\r\n\r\n        // Trigger updates for each scene.\r\n        this.scenes.forEach(s => {\r\n\r\n            // Get all active game objects with colliders\r\n            s.gameObjects.filter(go => go.isActive).forEach(go => {\r\n                go.updateSync(this.counter, this.physicsPerSecond);\r\n            });\r\n        });\r\n    }\r\n\r\n    /** Remove scene reference from colliders */\r\n    public clear(sceneNames: string[]) {\r\n        this.counter = 0;   // Reset counter for next scene\r\n        this.scenes = this.scenes.filter(sg => !sceneNames.some(sn => sg.name == sn));\r\n    }\r\n}\r\n"],
  "mappings": "AAYO,WAAK;AAAL;AACH;AACA;AAAA,GAFQ;AAZZ;AAAA,EAoCI,+BAAuC;AAAnB;AANZ,kBAAwB;AACxB,mBAAmB;AAAA;AAAA,EASpB;AAEH,wBAAmC;AAGnC,iBAAa,QAAQ;AACjB,kBAAY,KAAK;AAAA;AAIrB,QAAI,YAAY,SAAS;AAErB,WAAK,OAAO,KAAK;AAAA,QACb,MAAO;AAAA,QACP;AAAA;AAAA;AAAA;AAAA,EAML;AAGH,SAAK;AAGL,QAAI,KAAK,OAAO,UAAU;AACtB;AAAA;AAIJ,SAAK,OAAO,QAAQ;AAGhB,QAAE,YAAY,OAAO,QAAM,GAAG,UAAU,QAAQ;AAC5C,WAAG,WAAW,KAAK,SAAS,KAAK;AAAA;AAAA;AAAA;AAAA,EAMtC;AACH,SAAK,UAAU;AACf,SAAK,SAAS,KAAK,OAAO,OAAO,QAAM,CAAC,WAAW,KAAK,QAAM,GAAG,QAAQ;AAAA;AAAA;",
  "names": []
}
