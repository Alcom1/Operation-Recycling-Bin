{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\engine\\modules\\mouse.ts"],
  "sourcesContent": ["import Vect from \"engine/utilities/vect\";\r\n\r\nexport enum MouseState {\r\n    /** Mouse is not pressed */\r\n    ISRELEASED,\r\n    /** Mouse was pressed last frame */\r\n    WASPRESSED,\r\n    /** Mouse is pressed */\r\n    ISPRESSED,\r\n    /** Mouse was released last frame */\r\n    WASRELEASED\r\n}\r\n\r\n/** Module that manages mouse movement and stateTouches. **/\r\nexport default class MouseModule {\r\n    private mouseElement: HTMLElement;\r\n    private mousePos = new Vect(0, 0);\r\n    private mousePressed = false;\r\n    private afterPressed = false;\r\n    private mouseType = \"\";\r\n    private resolution = new Vect(0, 0);\r\n\r\n    /** Constructor */\r\n    constructor(element: HTMLElement) {\r\n        this.mouseElement = element;\r\n        this.mouseElement.style.touchAction = 'none';\r\n\r\n        this.mouseElement.onpointermove = e => this.updatePos(e);\r\n        this.mouseElement.onpointerdown = e => {\r\n            this.mousePressed = true;\r\n            // On touch devices, we also need to make sure we register this as a change in cursor position\r\n            this.updatePos(e);\r\n        }\r\n        this.mouseElement.onpointerup = () => this.mousePressed = false;\r\n        this.mouseElement.onpointercancel = () => this.mousePressed = false;\r\n    }\r\n\r\n    /** Update the mouse for a frame (Should be the last action of a frame) */\r\n    public update() {\r\n        // After a press or release, switch from WAS-state to IS-state\r\n        this.afterPressed = this.mousePressed;\r\n    }\r\n\r\n    /** Update the mouse position */\r\n    private updatePos(e: PointerEvent) {\r\n\r\n        // Prevent scroll events\r\n        e.preventDefault();\r\n        this.mouseType = e.pointerType;\r\n        this.mousePos = new Vect(\r\n            e.offsetX * (this.resolution.x / (e.target as HTMLElement).clientWidth),\r\n            e.offsetY * (this.resolution.y / (e.target as HTMLElement).clientHeight)\r\n        );\r\n    }\r\n\r\n    /** Mouse position */\r\n    public getPos(): Vect {\r\n        return this.mousePos;\r\n    }\r\n\r\n    /** Mouse state */\r\n    public getMouseState(): MouseState {\r\n        if (this.mousePressed && !this.afterPressed) {          // If mouse is pressed and afterPressed is different\r\n            return MouseState.WASPRESSED;                       // Mouse was pressed this frame\r\n        } else if (this.mousePressed) {                         // If mouse is pressed and afterPressed is same\r\n            return MouseState.ISPRESSED;                        // Mouse is currently pressed\r\n        } else if (!this.mousePressed && this.afterPressed) {   // If mouse is released and afterPressed is different\r\n            return MouseState.WASRELEASED;                      // Mouse was released this frame\r\n        } else {                                                // If mouse is released and afterPressed is same\r\n            return MouseState.ISRELEASED;                       // Mouse is currently released\r\n        }\r\n    }\r\n\r\n    /** Mouse type */\r\n    public getMouseType(): string {\r\n        return this.mouseType;\r\n    }\r\n\r\n    /** Sets the mouse cursor from a URL */\r\n    public setCursorURL(url?: string) {\r\n        this.mouseElement.style.cursor = \"url(\" + url + \"), auto\";\r\n    }\r\n\r\n    /** Sets the resolution off the mouse space */\r\n    public setResolution(resx: number, resy: number): void {\r\n        this.resolution = new Vect(resx, resy);\r\n    }\r\n}\r\n"],
  "mappings": "AAAA;AAEO,WAAK;AAAL;AAEH;AAEA;AAEA;AAEA;AAAA,GARQ;AAFZ;AAAA,EAuBI;AAPQ,oBAAW,IAAI,KAAK,GAAG;AACvB,wBAAe;AACf,wBAAe;AACf,qBAAY;AACZ,sBAAa,IAAI,KAAK,GAAG;AAI7B,SAAK,eAAe;AACpB,SAAK,aAAa,MAAM,cAAc;AAEtC,SAAK,aAAa,gBAAgB,OAAK,KAAK,UAAU;AACtD,SAAK,aAAa,gBAAgB;AAC9B,WAAK,eAAe;AAEpB,WAAK,UAAU;AAAA;AAEnB,SAAK,aAAa,cAAc,MAAM,KAAK,eAAe;AAC1D,SAAK,aAAa,kBAAkB,MAAM,KAAK,eAAe;AAAA;AAAA,EAI3D;AAEH,SAAK,eAAe,KAAK;AAAA;AAAA,EAIrB;AAGJ,MAAE;AACF,SAAK,YAAY,EAAE;AACnB,SAAK,WAAW,IAAI,KAChB,EAAE,UAAW,MAAK,WAAW,IAAK,EAAE,OAAuB,cAC3D,EAAE,UAAW,MAAK,WAAW,IAAK,EAAE,OAAuB;AAAA;AAAA,EAK5D;AACH,WAAO,KAAK;AAAA;AAAA,EAIT;AACH,QAAI,KAAK,gBAAgB,CAAC,KAAK;AAC3B,aAAO;AAAA,eACA,KAAK;AACZ,aAAO;AAAA,eACA,CAAC,KAAK,gBAAgB,KAAK;AAClC,aAAO;AAAA;AAEP,aAAO;AAAA;AAAA;AAAA,EAKR;AACH,WAAO,KAAK;AAAA;AAAA,EAIT;AACH,SAAK,aAAa,MAAM,SAAS,SAAS,MAAM;AAAA;AAAA,EAI7C;AACH,SAAK,aAAa,IAAI,KAAK,MAAM;AAAA;AAAA;",
  "names": []
}
