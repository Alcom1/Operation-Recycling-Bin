{
  "version": 3,
  "sources": ["/home/jonathan/Development/lego/Operation-Recycling-Bin/src/engine/modules/mouse.ts"],
  "sourcesContent": ["import Vect from \"engine/utilities/vect\";\n\nexport enum MouseState {\n    /** Mouse is not pressed */\n    ISRELEASED,\n    /** Mouse was pressed last frame */\n    WASPRESSED,\n    /** Mouse is pressed */\n    ISPRESSED,\n    /** Mouse was released last frame */\n    WASRELEASED\n}\n\n/** Module that manages mouse movement and stateTouches. **/\nexport default class MouseModule {\n    private mouseElement: HTMLElement;\n    private mousePos = new Vect(0, 0);\n    private mousePressed = false;\n    private afterPressed = false;\n    private resolution = new Vect(0, 0);\n\n    constructor(element: HTMLElement) {\n        this.mouseElement = element;\n\n        this.mouseElement.onpointermove = e => this.updatePos(e);\n        this.mouseElement.onpointerdown = e => {\n            this.mousePressed = true;\n            // On touch devices, we also need to make sure we register this as a change in cursor position\n            this.updatePos(e);\n        }\n        this.mouseElement.onpointerup = () => this.mousePressed = false;\n        this.mouseElement.onpointercancel = () => this.mousePressed = false;\n    }\n\n    /** Update the mouse for a frame (Should be the last action of a frame) */\n    public update() {\n        // After a press or release, switch from WAS-state to IS-state\n        this.afterPressed = this.mousePressed;\n    }\n\n    /** Update the mouse position */\n    private updatePos(e: PointerEvent) {\n        // Prevent scroll events\n        e.preventDefault();\n        this.mousePos = new Vect(\n            e.offsetX * (this.resolution.x / (e.target as HTMLElement).clientWidth),\n            e.offsetY * (this.resolution.y / (e.target as HTMLElement).clientHeight)\n        );\n    }\n\n    /** Mouse position */\n    public getPos(): Vect {\n        return this.mousePos;\n    }\n\n    /** Mouse state */\n    public getMouseState(): MouseState {\n        if (this.mousePressed && !this.afterPressed) {        // If mouse is pressed and afterPressed is different\n            return MouseState.WASPRESSED;                     // Mouse was pressed this frame\n        } else if (this.mousePressed) {                         // If mouse is pressed and afterPressed is same\n            return MouseState.ISPRESSED;                      // Mouse is currently pressed\n        } else if(!this.mousePressed && this.afterPressed) {    // If mouse is released and afterPressed is different\n            return MouseState.WASRELEASED;                    // Mouse was released this frame\n        } else {                                                // If mouse is released and afterPressed is same\n            return MouseState.ISRELEASED;                     // Mouse is currently released\n        }\n    }\n\n    /** Sets the mouse cursor from a URL */\n    public setCursorURL(url: string) {\n        this.mouseElement.style.cursor = \"url(\" + url + \"), auto\";\n    }\n\n    /** Sets the resolution off the mouse space */\n    public setResolution(resx: number, resy: number): void {\n        this.resolution = new Vect(resx, resy);\n    }\n}\n"],
  "mappings": "AAAA;AAEO,WAAK;AAAL;AAEH;AAEA;AAEA;AAEA;AAAA,GARQ;AAFZ;AAAA,EAqBI;AALQ,oBAAW,IAAI,KAAK,GAAG;AACvB,wBAAe;AACf,wBAAe;AACf,sBAAa,IAAI,KAAK,GAAG;AAG7B,SAAK,eAAe;AAEpB,SAAK,aAAa,gBAAgB,OAAK,KAAK,UAAU;AACtD,SAAK,aAAa,gBAAgB;AAC9B,WAAK,eAAe;AAEpB,WAAK,UAAU;AAAA;AAEnB,SAAK,aAAa,cAAc,MAAM,KAAK,eAAe;AAC1D,SAAK,aAAa,kBAAkB,MAAM,KAAK,eAAe;AAAA;AAAA,EAI3D;AAEH,SAAK,eAAe,KAAK;AAAA;AAAA,EAIrB;AAEJ,MAAE;AACF,SAAK,WAAW,IAAI,KAChB,EAAE,UAAW,MAAK,WAAW,IAAK,EAAE,OAAuB,cAC3D,EAAE,UAAW,MAAK,WAAW,IAAK,EAAE,OAAuB;AAAA;AAAA,EAK5D;AACH,WAAO,KAAK;AAAA;AAAA,EAIT;AACH,QAAI,KAAK,gBAAgB,CAAC,KAAK;AAC3B,aAAO;AAAA,eACA,KAAK;AACZ,aAAO;AAAA,eACD,CAAC,KAAK,gBAAgB,KAAK;AACjC,aAAO;AAAA;AAEP,aAAO;AAAA;AAAA;AAAA,EAKR;AACH,SAAK,aAAa,MAAM,SAAS,SAAS,MAAM;AAAA;AAAA,EAI7C;AACH,SAAK,aAAa,IAAI,KAAK,MAAM;AAAA;AAAA;",
  "names": []
}
