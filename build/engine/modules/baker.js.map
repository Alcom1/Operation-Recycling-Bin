{
  "version": 3,
  "sources": ["/home/jonathan/Development/lego/Operation-Recycling-Bin/src/engine/modules/baker.ts"],
  "sourcesContent": ["/** Module bakes images for optimized drawing */\nexport default class BakerModule {\n    private canvas: HTMLCanvasElement;\n    private ctx: CanvasRenderingContext2D;\n    private images: Record<string, string>;\n\n    /**\n     * @param element HTML canvas element\n     */\n    constructor(element: HTMLCanvasElement) {\n        // Canvas\n        this.canvas = element;\n\n        // Canvas Content\n        const ctx = this.canvas.getContext('2d');\n        if (!ctx) throw new Error(\"Unable to acquire canvas rendering context\");\n        this.ctx = ctx;\n        \n        // Cache of previously drawn images\n        this.images = {};\n    }\n\n    /**\n     * Bake an image and return its data using the canvas\n     * @returns Generated image data, or cached image data if in cache\n     */\n    bake(\n        render: (ctx: CanvasRenderingContext2D) => void,\n        width?: number,\n        height?: number,\n        tag?: string\n    ) {\n        // If an image with this tag has already been baked, return it.\n        if (tag && this.images[tag]) {\n            return this.images[tag];\n        }\n\n        // Stored canvas size to return to.\n        const canvasSize = { \n            width : this.canvas.width, \n            height : this.canvas.height\n        };\n\n        // Temporary canvas size for baking.\n        this.canvas.width = width || this.canvas.width;\n        this.canvas.height = height || this.canvas.height;\n\n        this.ctx.save();\n        // Clear canvas for drawing\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        // Generate image\n        render(this.ctx);\n        // Get image data\n        const data = this.canvas.toDataURL();\n        \n        // Only store image if tag exists\n        if (tag) {\n            // Store image under this tag\n            this.images[tag] = data;\n        }\n        this.ctx.restore();\n\n        // Reset canvas size.\n        this.canvas.width = canvasSize.width;\n        this.canvas.height = canvasSize.height;\n\n        return data;\n    }\n}\n"],
  "mappings": "AAAA;AAAA,EASI,YAAY;AAER,SAAK,SAAS;AAGd,gBAAY,KAAK,OAAO,WAAW;AACnC,QAAI,CAAC;AAAK,YAAM,IAAI,MAAM;AAC1B,SAAK,MAAM;AAGX,SAAK,SAAS;AAAA;AAAA,EAOlB;AAOI,QAAI,OAAO,KAAK,OAAO;AACnB,aAAO,KAAK,OAAO;AAAA;AAIvB,uBAAmB;AAAA,MACf,OAAQ,KAAK,OAAO;AAAA,MACpB,QAAS,KAAK,OAAO;AAAA;AAIzB,SAAK,OAAO,QAAQ,SAAS,KAAK,OAAO;AACzC,SAAK,OAAO,SAAS,UAAU,KAAK,OAAO;AAE3C,SAAK,IAAI;AAET,SAAK,IAAI,UAAU,GAAG,GAAG,KAAK,OAAO,OAAO,KAAK,OAAO;AAExD,WAAO,KAAK;AAEZ,iBAAa,KAAK,OAAO;AAGzB,QAAI;AAEA,WAAK,OAAO,OAAO;AAAA;AAEvB,SAAK,IAAI;AAGT,SAAK,OAAO,QAAQ,WAAW;AAC/B,SAAK,OAAO,SAAS,WAAW;AAEhC,WAAO;AAAA;AAAA;",
  "names": []
}
