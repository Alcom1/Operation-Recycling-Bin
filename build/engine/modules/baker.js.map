{
  "version": 3,
  "sources": ["C:\\Users\\Alcom\\Desktop\\Dev\\Git\\Operation Recycling Bin\\src\\engine\\modules\\baker.ts"],
  "sourcesContent": ["/** Module bakes images for optimized drawing */\r\nexport default class BakerModule {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n    private images: Record<string, string>;\r\n\r\n    /**\r\n     * @param element HTML canvas element\r\n     */\r\n    constructor(element: HTMLCanvasElement) {\r\n        // Canvas\r\n        this.canvas = element;\r\n\r\n        // Canvas Content\r\n        const ctx = this.canvas.getContext('2d');\r\n        if (!ctx) throw new Error(\"Unable to acquire canvas rendering context\");\r\n        this.ctx = ctx;\r\n        \r\n        // Cache of previously drawn images\r\n        this.images = {};\r\n    }\r\n\r\n    /**\r\n     * Bake an image and return its data using the canvas\r\n     * @returns Generated image data, or cached image data if in cache\r\n     */\r\n    bake(\r\n        render: (ctx: CanvasRenderingContext2D) => void,\r\n        width?: number,\r\n        height?: number,\r\n        tag?: string\r\n    ) {\r\n        // If an image with this tag has already been baked, return it.\r\n        if (tag && this.images[tag]) {\r\n            return this.images[tag];\r\n        }\r\n\r\n        // Stored canvas size to return to.\r\n        const canvasSize = { \r\n            width : this.canvas.width, \r\n            height : this.canvas.height\r\n        };\r\n\r\n        // Temporary canvas size for baking.\r\n        this.canvas.width = width || this.canvas.width;\r\n        this.canvas.height = height || this.canvas.height;\r\n\r\n        this.ctx.save();\r\n        // Clear canvas for drawing\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        // Generate image\r\n        render(this.ctx);\r\n        // Get image data\r\n        const data = this.canvas.toDataURL();\r\n        \r\n        // Only store image if tag exists\r\n        if (tag) {\r\n            // Store image under this tag\r\n            this.images[tag] = data;\r\n        }\r\n        this.ctx.restore();\r\n\r\n        // Reset canvas size.\r\n        this.canvas.width = canvasSize.width;\r\n        this.canvas.height = canvasSize.height;\r\n\r\n        return data;\r\n    }\r\n}\r\n"],
  "mappings": "AAAA;AAAA,EASI,YAAY;AAER,SAAK,SAAS;AAGd,gBAAY,KAAK,OAAO,WAAW;AACnC,QAAI,CAAC;AAAK,YAAM,IAAI,MAAM;AAC1B,SAAK,MAAM;AAGX,SAAK,SAAS;AAAA;AAAA,EAOlB;AAOI,QAAI,OAAO,KAAK,OAAO;AACnB,aAAO,KAAK,OAAO;AAAA;AAIvB,uBAAmB;AAAA,MACf,OAAQ,KAAK,OAAO;AAAA,MACpB,QAAS,KAAK,OAAO;AAAA;AAIzB,SAAK,OAAO,QAAQ,SAAS,KAAK,OAAO;AACzC,SAAK,OAAO,SAAS,UAAU,KAAK,OAAO;AAE3C,SAAK,IAAI;AAET,SAAK,IAAI,UAAU,GAAG,GAAG,KAAK,OAAO,OAAO,KAAK,OAAO;AAExD,WAAO,KAAK;AAEZ,iBAAa,KAAK,OAAO;AAGzB,QAAI;AAEA,WAAK,OAAO,OAAO;AAAA;AAEvB,SAAK,IAAI;AAGT,SAAK,OAAO,QAAQ,WAAW;AAC/B,SAAK,OAAO,SAAS,WAAW;AAEhC,WAAO;AAAA;AAAA;",
  "names": []
}
